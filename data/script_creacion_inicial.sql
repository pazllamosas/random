USE [GD2C2016]
GO

-- DROP TABLAS 

IF OBJECT_ID('RANDOM.CANCELACION') IS NOT NULL
DROP TABLE RANDOM.CANCELACION
IF OBJECT_ID('RANDOM.TIPO_CANCELACION') IS NOT NULL
DROP TABLE RANDOM.TIPO_CANCELACION
IF OBJECT_ID('RANDOM.RESULTADO_TURNO') IS NOT NULL
DROP TABLE RANDOM.RESULTADO_TURNO
IF OBJECT_ID('RANDOM.TURNO') IS NOT NULL
DROP TABLE RANDOM.TURNO
IF OBJECT_ID('RANDOM.AGENDA_HORARIO_DISPONIBLE') IS NOT NULL
DROP TABLE RANDOM.AGENDA_HORARIO_DISPONIBLE
IF OBJECT_ID('RANDOM.BONO') IS NOT NULL
DROP TABLE RANDOM.BONO
IF OBJECT_ID('RANDOM.COMPRA_BONO') IS NOT NULL
DROP TABLE RANDOM.COMPRA_BONO
IF OBJECT_ID('RANDOM.ESPECIALIDAD_POR_PROFESIONAL') IS NOT NULL
DROP TABLE RANDOM.ESPECIALIDAD_POR_PROFESIONAL
IF OBJECT_ID('RANDOM.ESPECIALIDAD') IS NOT NULL
DROP TABLE RANDOM.ESPECIALIDAD
IF OBJECT_ID('RANDOM.TIPO_ESPECIALIDAD') IS NOT NULL
DROP TABLE RANDOM.TIPO_ESPECIALIDAD
IF OBJECT_ID('RANDOM.PROFESIONAL') IS NOT NULL
DROP TABLE RANDOM.PROFESIONAL
IF OBJECT_ID('RANDOM.HISTORIAL_PLAN') IS NOT NULL
DROP TABLE RANDOM.HISTORIAL_PLAN
IF OBJECT_ID('RANDOM.AFILIADO') IS NOT NULL
DROP TABLE RANDOM.AFILIADO
IF OBJECT_ID('RANDOM.PERSONA') IS NOT NULL
DROP TABLE RANDOM.PERSONA
IF OBJECT_ID('RANDOM.PLANES') IS NOT NULL
DROP TABLE RANDOM.PLANES
IF OBJECT_ID('RANDOM.ESTADO_CIVIL') IS NOT NULL
DROP TABLE RANDOM.ESTADO_CIVIL
IF OBJECT_ID('RANDOM.USUARIO_POR_ROL') IS NOT NULL
DROP TABLE RANDOM.USUARIO_POR_ROL
IF OBJECT_ID('RANDOM.USUARIO') IS NOT NULL
DROP TABLE RANDOM.USUARIO
IF OBJECT_ID('RANDOM.ROL_POR_FUNCIONALIDADES') IS NOT NULL
DROP TABLE RANDOM.ROL_POR_FUNCIONALIDADES
IF OBJECT_ID('RANDOM.FUNCIONALIDADES') IS NOT NULL
DROP TABLE RANDOM.FUNCIONALIDADES
IF OBJECT_ID('RANDOM.ROL') IS NOT NULL
DROP TABLE RANDOM.ROL
IF OBJECT_ID('RANDOM.TIPOS_DOCUMENTOS') IS NOT NULL
DROP TABLE RANDOM.TIPOS_DOCUMENTOS
IF OBJECT_ID('dbo.TEMPORAL') IS NOT NULL
DROP TABLE dbo.TEMPORAL
IF OBJECT_ID('dbo.TEMPORALTURNOS') IS NOT NULL
DROP TABLE dbo.TEMPORALTURNOS
IF OBJECT_ID('TABLA_DE_DIAS_NUMERO') IS NOT NULL
DROP TABLE TABLA_DE_DIAS_NUMERO


-- DROP PROCEDURES Y FUNCTIONS 

IF OBJECT_ID('RANDOM.GET_ID_TIPO_DOC') IS NOT NULL
DROP FUNCTION RANDOM.GET_ID_TIPO_DOC
IF OBJECT_ID('RANDOM.GET_ID_ESTADO_CIVIL') IS NOT NULL
DROP FUNCTION RANDOM.GET_ID_ESTADO_CIVIL
IF OBJECT_ID('RANDOM.GET_ID_PLAN') IS NOT NULL
DROP FUNCTION RANDOM.GET_ID_PLAN
IF OBJECT_ID('RANDOM.GET_ID_USUARIO') IS NOT NULL
DROP FUNCTION RANDOM.GET_ID_USUARIO
IF OBJECT_ID('RANDOM.GET_ID_ROL') IS NOT NULL
DROP FUNCTION RANDOM.GET_ID_ROL
IF OBJECT_ID('RANDOM.EXISTE_USUARIO') IS NOT NULL
DROP FUNCTION RANDOM.EXISTE_USUARIO
IF OBJECT_ID('RANDOM.PASSWORD_CORRECTA') IS NOT NULL
DROP FUNCTION RANDOM.PASSWORD_CORRECTA
IF OBJECT_ID('RANDOM.ROL_HABILITADO') IS NOT NULL
DROP FUNCTION RANDOM.ROL_HABILITADO
IF OBJECT_ID('RANDOM.EXISTE_USUARIO_ROL') IS NOT NULL
DROP FUNCTION RANDOM.EXISTE_USUARIO_ROL
IF OBJECT_ID('RANDOM.EXISTE_FUNCIONALIDAD_ROL') IS NOT NULL
DROP FUNCTION RANDOM.EXISTE_FUNCIONALIDAD_ROL
IF OBJECT_ID('RANDOM.EXISTE_ROL') IS NOT NULL
DROP FUNCTION RANDOM.EXISTE_ROL
IF OBJECT_ID('RANDOM.SIGUIENTE_AFILIADO') IS NOT NULL
DROP FUNCTION RANDOM.SIGUIENTE_AFILIADO
IF OBJECT_ID('RANDOM.GET_ID_PERSONA') IS NOT NULL
DROP FUNCTION RANDOM.GET_ID_PERSONA
IF OBJECT_ID('RANDOM.EXISTE_AFILIADO') IS NOT NULL
DROP FUNCTION RANDOM.EXISTE_AFILIADO
IF OBJECT_ID('RANDOM.ROL_CORRECTO') IS NOT NULL
DROP FUNCTION RANDOM.ROL_CORRECTO
IF OBJECT_ID('RANDOM.VERIFICACION_DIA') IS NOT NULL
DROP FUNCTION RANDOM.VERIFICACION_DIA
IF OBJECT_ID('RANDOM.GET_NRO_AFILIADO_RAIZ') IS NOT NULL
DROP FUNCTION RANDOM.GET_NRO_AFILIADO_RAIZ


IF OBJECT_ID('RANDOM.GET_ROLES_ESTADO') IS NOT NULL
DROP PROCEDURE RANDOM.GET_ROLES_ESTADO
IF OBJECT_ID('RANDOM.GET_AGENDA') IS NOT NULL
DROP PROCEDURE RANDOM.GET_AGENDA
IF OBJECT_ID('RANDOM.TRAER_PROFESIONAL_CON_DNI') IS NOT NULL
DROP PROCEDURE RANDOM.TRAER_PROFESIONAL_CON_DNI
IF OBJECT_ID('RANDOM.CARGA_AGENDA') IS NOT NULL
DROP PROCEDURE RANDOM.CARGA_AGENDA 
IF OBJECT_ID('RANDOM.BAJA_AFILIADO_ASIGNACION') IS NOT NULL
DROP PROCEDURE RANDOM.BAJA_AFILIADO_ASIGNACION 
IF OBJECT_ID('RANDOM.GET_HISTORIAL') IS NOT NULL
DROP PROCEDURE RANDOM.GET_HISTORIAL
IF OBJECT_ID('RANDOM.CREAR_FAMILIAR') IS NOT NULL
DROP PROCEDURE RANDOM.CREAR_FAMILIAR
IF OBJECT_ID('RANDOM.GET_PROFESIONALES') IS NOT NULL
DROP PROCEDURE RANDOM.GET_PROFESIONALES
IF OBJECT_ID('RANDOM.NRO_AFILIADO_CONYUGE') IS NOT NULL
DROP PROCEDURE RANDOM.NRO_AFILIADO_CONYUGE
IF OBJECT_ID('RANDOM.NRO_AFILIADO_FAMILIARES') IS NOT NULL
DROP PROCEDURE RANDOM.NRO_AFILIADO_FAMILIARES
IF OBJECT_ID('RANDOM.CAMBIO_PLAN') IS NOT NULL
DROP PROCEDURE RANDOM.CAMBIO_PLAN
IF OBJECT_ID('RANDOM.BAJA_AFILIADO') IS NOT NULL
DROP PROCEDURE RANDOM.BAJA_AFILIADO
IF OBJECT_ID('RANDOM.CREAR_AFILIADO') IS NOT NULL
DROP PROCEDURE RANDOM.CREAR_AFILIADO
IF OBJECT_ID('RANDOM.MODIFICAR_AFILIADO') IS NOT NULL
DROP PROCEDURE RANDOM.MODIFICAR_AFILIADO
IF OBJECT_ID('RANDOM.GET_ROLES') IS NOT NULL
DROP PROCEDURE RANDOM.GET_ROLES
IF OBJECT_ID('RANDOM.GET_PLANES') IS NOT NULL
DROP PROCEDURE RANDOM.GET_PLANES
IF OBJECT_ID('RANDOM.GET_ESTADO_CIVIL') IS NOT NULL
DROP PROCEDURE RANDOM.GET_ESTADO_CIVIL
IF OBJECT_ID('RANDOM.GET_TIPO_DOCUMENTO') IS NOT NULL
DROP PROCEDURE RANDOM.GET_TIPO_DOCUMENTO
IF OBJECT_ID('RANDOM.GET_AFILIADOS') IS NOT NULL
DROP PROCEDURE RANDOM.GET_AFILIADOS
IF OBJECT_ID('RANDOM.GET_USUARIOS') IS NOT NULL
DROP PROCEDURE RANDOM.GET_USUARIOS
IF OBJECT_ID('RANDOM.ACTIVAR_ROL') IS NOT NULL
DROP PROCEDURE RANDOM.ACTIVAR_ROL
IF OBJECT_ID('RANDOM.BAJA_ROL') IS NOT NULL
DROP PROCEDURE RANDOM.BAJA_ROL
IF OBJECT_ID('RANDOM.BAJA_USUARIO') IS NOT NULL
DROP PROCEDURE RANDOM.BAJA_USUARIO
IF OBJECT_ID('RANDOM.HABILITAR_USUARIO') IS NOT NULL
DROP PROCEDURE RANDOM.HABILITAR_USUARIO
IF OBJECT_ID('RANDOM.INTENTO_LOGIN') IS NOT NULL
DROP PROCEDURE RANDOM.INTENTO_LOGIN
IF OBJECT_ID('RANDOM.ELIMINAR_FUNCIONALIDAD_DEL_ROL') IS NOT NULL
DROP PROCEDURE RANDOM.ELIMINAR_FUNCIONALIDAD_DEL_ROL
IF OBJECT_ID('RANDOM.MODIFICAR_NOMBRE_ROL') IS NOT NULL
DROP PROCEDURE RANDOM.MODIFICAR_NOMBRE_ROL
IF OBJECT_ID('RANDOM.ASIGNAR_FUNCIONALIDAD') IS NOT NULL
DROP PROCEDURE RANDOM.ASIGNAR_FUNCIONALIDAD
IF OBJECT_ID('RANDOM.ASIGNAR_ROL') IS NOT NULL
DROP PROCEDURE RANDOM.ASIGNAR_ROL
IF OBJECT_ID('RANDOM.CREAR_ROL') IS NOT NULL
DROP PROCEDURE RANDOM.CREAR_ROL
IF OBJECT_ID('RANDOM.CREAR_CONYUGE') IS NOT NULL
DROP PROCEDURE RANDOM.CREAR_CONYUGE
IF OBJECT_ID('RANDOM.CANCELACION_TURNO_AFILIADO') IS NOT NULL
DROP PROCEDURE RANDOM.CANCELACION_TURNO_AFILIADO

--9 compra de bonos
IF OBJECT_ID('RANDOM.COMPRA_DE_BONO') IS NOT NULL
DROP PROCEDURE RANDOM.COMPRA_DE_BONO
IF OBJECT_ID('RANDOM.CALCULO_MONTO') IS NOT NULL
DROP FUNCTION RANDOM.CALCULO_MONTO

--10 pedido de turno
IF OBJECT_ID('RANDOM.FILTRAR_MEDICO') IS NOT NULL
DROP PROCEDURE RANDOM.FILTRAR_MEDICO
IF OBJECT_ID('RANDOM.RESERVO_FECHA_TURNO') IS NOT NULL
DROP PROCEDURE RANDOM.RESERVO_FECHA_TURNO
IF OBJECT_ID('RANDOM.PEDIDO_DE_TURNO_HORARIOS_DISPONIBLES') IS NOT NULL
DROP PROCEDURE RANDOM.PEDIDO_DE_TURNO_HORARIOS_DISPONIBLES
IF OBJECT_ID('RANDOM.VALIDAR_AFILIADO') IS NOT NULL
DROP FUNCTION RANDOM.VALIDAR_AFILIADO

--11 registro de llegada para atencion medica
IF OBJECT_ID('RANDOM.GET_ESPECIALIDAD') IS NOT NULL
DROP PROCEDURE RANDOM.GET_ESPECIALIDAD
IF OBJECT_ID('RANDOM.GET_MEDICOS') IS NOT NULL
DROP PROCEDURE RANDOM.GET_MEDICOS
IF OBJECT_ID('RANDOM.TRAER_TURNOS_MEDICO') IS NOT NULL
DROP PROCEDURE RANDOM.TRAER_TURNOS_MEDICO
IF OBJECT_ID('RANDOM.BONOS_DISPONIBLES') IS NOT NULL
DROP PROCEDURE RANDOM.BONOS_DISPONIBLES
--IF OBJECT_ID('RANDOM.BONOS_DISPONIBLES') IS NOT NULL ---------------------------->PARA BORRAR
--DROP FUNCTION RANDOM.BONOS_DISPONIBLES ------------------------------------------>PARA BORRAR
IF OBJECT_ID('RANDOM.REGISTRO_LLEGADA') IS NOT NULL
DROP PROCEDURE RANDOM.REGISTRO_LLEGADA


IF OBJECT_ID('RANDOM.antesDelTop') IS NOT NULL
DROP PROCEDURE RANDOM.antesDelTop 
IF OBJECT_ID('RANDOM.top5EspecialidadesConMasConsultasUtilizadas') IS NOT NULL
DROP PROCEDURE RANDOM.top5EspecialidadesConMasConsultasUtilizadas
IF OBJECT_ID('RANDOM.top5AfiliadosConMayorCantBonosComprados') IS NOT NULL
DROP PROCEDURE RANDOM.top5AfiliadosConMayorCantBonosComprados
IF OBJECT_ID('RANDOM.top5ProfesionalesMenosHorasTrabajadas') IS NOT NULL
DROP PROCEDURE RANDOM.top5ProfesionalesMenosHorasTrabajadas
IF OBJECT_ID('RANDOM.top5ProfesionalesMasConsultadosPorPlan') IS NOT NULL
DROP PROCEDURE RANDOM.top5ProfesionalesMasConsultadosPorPlan
IF OBJECT_ID('RANDOM.top5EspecialidadesConMasCancelacionesDeTurno') IS NOT NULL
DROP PROCEDURE RANDOM.top5EspecialidadesConMasCancelacionesDeTurno
IF OBJECT_ID('RANDOM.TURNO_CONCRETADO') IS NOT NULL
DROP PROCEDURE RANDOM.TURNO_CONCRETADO
IF OBJECT_ID('RANDOM.TURNO_SIN_CONCRETAR') IS NOT NULL
DROP PROCEDURE RANDOM.TURNO_SIN_CONCRETAR
IF OBJECT_ID('RANDOM.GET_TIPOS_CANCELACION') IS NOT NULL
DROP PROCEDURE RANDOM.GET_TIPOS_CANCELACION
IF OBJECT_ID('RANDOM.CANCELAR_TURNO_AFILIADO') IS NOT NULL
DROP PROCEDURE RANDOM.CANCELAR_TURNO_AFILIADO
IF OBJECT_ID('RANDOM.CANCELAR_TURNO_PROFESIONAL') IS NOT NULL
DROP PROCEDURE RANDOM.CANCELAR_TURNO_PROFESIONAL

IF OBJECT_ID('RANDOM.BUSCAR_MEDICO') IS NOT NULL
 DROP PROCEDURE RANDOM.BUSCAR_MEDICO
IF OBJECT_ID('RANDOM.ACTIVAR_ROL') IS NOT NULL
 DROP PROCEDURE RANDOM.ACTIVAR_ROL
IF OBJECT_ID('RANDOM.PEDIDO_DE_TURNO') IS NOT NULL
 DROP PROCEDURE RANDOM.PEDIDO_DE_TURNO


-- DROP TRIGGERS

IF OBJECT_ID('RANDOM.AFTER_LOGIN') IS NOT NULL
DROP TRIGGER RANDOM.AFTER_LOGIN
IF OBJECT_ID('RANDOM.AFTER_NUEVO_AFILIADO') IS NOT NULL
DROP TRIGGER RANDOM.AFTER_NUEVO_AFILIADO
IF OBJECT_ID('RANDOM.AFTER_CANCELACION') IS NOT NULL
DROP TRIGGER RANDOM.AFTER_CANCELACION


-- DROP INDIXES

-- DROP SCHEMA

IF  EXISTS (SELECT * FROM sys.schemas WHERE name = N'RANDOM')
DROP SCHEMA [RANDOM]
GO

-- CREATE SCHEMA

CREATE SCHEMA [RANDOM] AUTHORIZATION [dbo]
GO

-- CREATE TABLAS
CREATE TABLE RANDOM.ROL(
	IdRol int PRIMARY KEY IDENTITY(1,1),
	Estado bit DEFAULT 1, -- 1 activo
	Descripcion nvarchar(255) UNIQUE
	)

CREATE TABLE RANDOM.FUNCIONALIDADES(
	IdFuncionalidad int PRIMARY KEY IDENTITY (1,1),
	DescripcionFunc nvarchar(255) UNIQUE
)

CREATE TABLE RANDOM.ROL_POR_FUNCIONALIDADES(
	IdFuncionalidad int,
	IdRol int,
	Habilitada bit DEFAULT 1	--para que en el menu se vean las de cada rol
	)

CREATE TABLE RANDOM.USUARIO(
	IdUsuario int PRIMARY KEY IDENTITY(1,1),
	Username nvarchar(255) NOT NULL UNIQUE,
	Pass nvarchar(255) NOT NULL,
	FechaCreacion datetime,
	UltimaModificacion datetime,
	IntentosFallidos int NOT NULL DEFAULT 0,
	Acceso bit, --1 ACCESO CORRECTO
	Habilitada bit DEFAULT 1
)
CREATE TABLE RANDOM.USUARIO_POR_ROL(
	IdUsuario int,
	IdRol int,
	Habilitada bit DEFAULT 1 --para dar de baja un usuario por rol
)

CREATE TABLE RANDOM.PERSONA(
	IdPersona int PRIMARY KEY IDENTITY(1,1),
	Nombre nvarchar(255),
	Apellido nvarchar(255),
	Sexo nvarchar(255) CHECK (Sexo IN ('Femenino', 'Masculino')),
	IdTipoDocumento int DEFAULT '1', 
	Documento numeric(18,0),
	Direccion nvarchar(255),
	Telefono numeric(18, 0),
	Mail nvarchar(255),
	Fecha_Nac datetime,
	IdUsuario int
)

CREATE TABLE RANDOM.TIPOS_DOCUMENTOS(
	IdTipoDocumento int PRIMARY KEY IDENTITY(1,1),
	Descripcion nvarchar(250)
)

CREATE TABLE RANDOM.AFILIADO(
	IdPersona int PRIMARY KEY,
	IdEstadoCivil int DEFAULT 1,
	CantidadACargo int DEFAULT '0',
	FamiliaresCargados int DEFAULT '0',
	IdPlan int,
	NumeroAfiliadoRaiz int DEFAULT 0,
	NumeroAfiliadoExt nvarchar(255) DEFAULT '01',
	Estado bit DEFAULT 1--, 1 ACTIVO 0 BAJA
	--NumeroUltimoBono int
)

CREATE TABLE RANDOM.PLANES(
	IdPlan int PRIMARY KEY IDENTITY(1,1),
	Codigo numeric(18),
	Nombre nvarchar(255),
	Abono int, 
	MontoConsulta numeric(18),
	MontoExpendio numeric(18)
)

CREATE TABLE RANDOM.HISTORIAL_PLAN(
	IdHistorialPlan int PRIMARY KEY IDENTITY(1,1),
	IdAfiliado int,
	IdPlan int,
	Fecha datetime,
	Motivo nvarchar(255) DEFAULT 'Inscripcion Afiliado Principal'
)

CREATE TABLE.RANDOM.ESTADO_CIVIL(
	IdEstadoCivil int PRIMARY KEY IDENTITY (1,1),
	Descripcion nvarchar(255)
)

CREATE TABLE RANDOM.PROFESIONAL(
	IdProfesional int PRIMARY KEY, --es la matricula del profesional
	HorasAcumuladas int DEFAULT 0
	
)
CREATE TABLE RANDOM.TIPO_ESPECIALIDAD(
	IdTipoEspecialidad int PRIMARY KEY IDENTITY(1,1),
	Codigo numeric(18),
	Descripcion nvarchar(255)
)

CREATE TABLE RANDOM.ESPECIALIDAD(
	IdEspecialidad int PRIMARY KEY IDENTITY(1,1),
	Codigo numeric(18),
	Descripcion nvarchar(255),
	IdTipoEspecialidad int
)

CREATE TABLE RANDOM.ESPECIALIDAD_POR_PROFESIONAL(
	IdProfesional int, -- puse persona en vez de profesional porque me acortaba mucho en un query, igual no cambia en nada por suerte
	IdEspecialidad int,
	PRIMARY KEY(IdProfesional, IdEspecialidad)
)

CREATE TABLE RANDOM.COMPRA_BONO(
	IdCompra int PRIMARY KEY IDENTITY (1,1),
	IdAfiliado int,
	Fecha datetime,
	MontoTotal int,
	Cantidad int
)

CREATE TABLE RANDOM.BONO(
	IdBono int PRIMARY KEY IDENTITY (1,1), -- No es el numero de bono porque sino tendria que cambiar el tipo de datos en muchos lugares
	IdCompra int,
	Usado bit default 1, -- 1 si esta usado
	Precio int,
	IdPlan int,
	CompraBonoFecha datetime,
	ConsultaNumero numeric(18), --numero de bono
	Habilitado bit DEFAULT 1 -- para el cambio de plan
)

CREATE TABLE RANDOM.AGENDA_HORARIO_DISPONIBLE(
	IdAgenda int PRIMARY KEY IDENTITY (1,1),
	IdProfesional int,
	IdEspecialidad int,
	HoraDesde nvarchar(255),
	HoraHasta nvarchar(255),
	Dia int,
	Activa bit -- 0 inactiva 1 activa
)

CREATE TABLE RANDOM.TURNO(
	IdTurno int PRIMARY KEY,
	IdAgenda int,
	IdAfiliado int,
	FechaYHoraTurno datetime, --es la fecha y hora en la que se HACE el turno
	Habilitado bit DEFAULT 1,
	IdEspecialidad int,
	RegistrarLlegada bit DEFAULT 0
)


CREATE TABLE RANDOM.RESULTADO_TURNO(
	IdResultadoTurno int PRIMARY KEY IDENTITY(1,1),
	IdTurno int,
	--IdBono int,
	Sintomas nvarchar(255),
	Enfermedades nvarchar(255),
	Fecha datetime -- es la fecha y hora en la que se hace la consulta dado un turno que sacaste antes
)

CREATE TABLE RANDOM.CANCELACION(
	IdCancelacion int PRIMARY KEY IDENTITY(1,1),
	IdTipoCancelacion int,
	IdTurno int,
	Motivo nvarchar(255)
 )

CREATE TABLE RANDOM.TIPO_CANCELACION(
	IdTipoCancelacion int PRIMARY KEY IDENTITY(1,1),
	Descripcion nvarchar(255)
)

CREATE TABLE TABLA_DE_DIAS_NUMERO (
    DiaNumero INT,
	DiaLetra nvarchar(255)
)

--FOREIGN KEY 

--ALTER TABLE RANDOM.PERSONA ADD FOREIGN KEY (IdUsuario) REFERENCES RANDOM.USUARIO
ALTER TABLE RANDOM.ROL_POR_FUNCIONALIDADES ADD FOREIGN KEY (IdFuncionalidad) REFERENCES RANDOM.FUNCIONALIDADES
ALTER TABLE RANDOM.ROL_POR_FUNCIONALIDADES ADD FOREIGN KEY (IdRol) REFERENCES RANDOM.ROL
ALTER TABLE RANDOM.USUARIO_POR_ROL ADD FOREIGN KEY (IdUsuario) REFERENCES RANDOM.USUARIO
ALTER TABLE RANDOM.USUARIO_POR_ROL ADD FOREIGN KEY (IdRol) REFERENCES RANDOM.ROL
ALTER TABLE RANDOM.AFILIADO ADD FOREIGN KEY (IdPersona) REFERENCES RANDOM.PERSONA
ALTER TABLE RANDOM.AFILIADO ADD FOREIGN KEY (IdEstadoCivil) REFERENCES RANDOM.ESTADO_CIVIL
ALTER TABLE RANDOM.AFILIADO ADD FOREIGN KEY (IdPlan) REFERENCES RANDOM.PLANES
ALTER TABLE RANDOM.HISTORIAL_PLAN ADD FOREIGN KEY (IdAfiliado) REFERENCES RANDOM.AFILIADO
ALTER TABLE RANDOM.PROFESIONAL ADD FOREIGN KEY (IdProfesional) REFERENCES RANDOM.PERSONA
ALTER TABLE RANDOM.ESPECIALIDAD ADD FOREIGN KEY (IdTipoEspecialidad) REFERENCES RANDOM.TIPO_ESPECIALIDAD
ALTER TABLE RANDOM.ESPECIALIDAD_POR_PROFESIONAL ADD FOREIGN KEY (IdProfesional) REFERENCES RANDOM.PROFESIONAL
ALTER TABLE RANDOM.ESPECIALIDAD_POR_PROFESIONAL ADD FOREIGN KEY (IdEspecialidad) REFERENCES RANDOM.ESPECIALIDAD
ALTER TABLE RANDOM.COMPRA_BONO ADD FOREIGN KEY (IdAfiliado) REFERENCES RANDOM.AFILIADO
ALTER TABLE RANDOM.BONO ADD FOREIGN KEY (IdCompra) REFERENCES RANDOM.COMPRA_BONO
ALTER TABLE RANDOM.BONO ADD FOREIGN KEY (IdPlan) REFERENCES RANDOM.PlANES
ALTER TABLE RANDOM.AGENDA_HORARIO_DISPONIBLE ADD FOREIGN KEY (IdProfesional) REFERENCES RANDOM.PROFESIONAL
ALTER TABLE RANDOM.TURNO ADD FOREIGN KEY (IdAgenda) REFERENCES RANDOM.AGENDA_HORARIO_DISPONIBLE
--ALTER TABLE RANDOM.RESULTADO_TURNO ADD FOREIGN KEY (IdBono) REFERENCES RANDOM.BONO
ALTER TABLE RANDOM.RESULTADO_TURNO ADD FOREIGN KEY (IdTurno) REFERENCES RANDOM.TURNO
ALTER TABLE RANDOM.CANCELACION ADD FOREIGN KEY (IdTipoCancelacion) REFERENCES RANDOM.TIPO_CANCELACION
ALTER TABLE RANDOM.CANCELACION ADD FOREIGN KEY (IdTurno) REFERENCES RANDOM.TURNO
ALTER TABLE RANDOM.PERSONA ADD FOREIGN KEY (IdTipoDocumento) REFERENCES RANDOM.TIPOS_DOCUMENTOS
ALTER TABLE RANDOM.PERSONA ADD FOREIGN KEY (IdUsuario) REFERENCES RANDOM.Usuario
ALTER TABLE RANDOM.TURNO ADD FOREIGN KEY (IdAfiliado) REFERENCES RANDOM.AFILIADO
ALTER TABLE RANDOM.TURNO ADD FOREIGN KEY (IdEspecialidad) REFERENCES RANDOM.ESPECIALIDAD
ALTER TABLE RANDOM.HISTORIAL_PLAN ADD FOREIGN KEY (IdPlan) REFERENCES RANDOM.PLANES
ALTER TABLE RANDOM.AGENDA_HORARIO_DISPONIBLE ADD FOREIGN KEY (IdEspecialidad) REFERENCES RANDOM.ESPECIALIDAD

-- CREATE INDIXES

------------------------  MIGRACION  ------------------------------

/*ROL*/
INSERT INTO RANDOM.ROL(Descripcion)
VALUES ('Administrador')
INSERT INTO RANDOM.ROL(Descripcion)
VALUES ('Afiliado')
INSERT INTO RANDOM.ROL(Descripcion)
VALUES ('Profesional')

/*FUNCIONALIDADES*/
SET IDENTITY_INSERT RANDOM.FUNCIONALIDADES ON
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (0,'Alta Afiliado')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (1,'Modificar Afiliado')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (2,'Baja Afiliado')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (3,'Alta Profesional')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (4,'Modificar Profesional')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (5,'Baja Profesional')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (6,'Generar Agenda')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (7,'Comprar Bono')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (8,'Registrar Llegada a la Atención')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (9,'Solicitar Turno')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (10,'Cancelar Turno')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (11,'Registrar Diagnóstico')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (12,'Consulta TOP 5')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (13,'Ver y modificar roles')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (14,'Ver especialidades')
INSERT INTO RANDOM.FUNCIONALIDADES(IdFuncionalidad,DescripcionFunc)
VALUES (15,'Ver planes')
SET IDENTITY_INSERT RANDOM.FUNCIONALIDADES OFF

/*ROL_POR_FUNCIONALIDADES*/
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(0,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(1,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(2,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(3,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(4,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(5,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(6,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(7,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(8,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(9,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(10,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(12,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(13,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(14,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(15,1,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(7,2,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(9,2,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(12,2,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(14,2,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(15,2,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(11,3,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(12,3,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(14,3,1)
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES
VALUES(15,3,1)

/*USUARIO  Y   USUARIO POR ROL  */
INSERT INTO RANDOM.USUARIO(Username,Pass, FechaCreacion, UltimaModificacion)
VALUES('admin','e6b87050bfcb8143fcb8db0170a4dc9ed00d904ddd3e2a4ad1b1e8dc0fdc9be7', GETDATE(), GETDATE())
INSERT INTO RANDOM.USUARIO(Username,Pass, FechaCreacion, UltimaModificacion)
VALUES('ana','e6b87050bfcb8143fcb8db0170a4dc9ed00d904ddd3e2a4ad1b1e8dc0fdc9be7', GETDATE(), GETDATE())
INSERT INTO RANDOM.USUARIO(Username,Pass, FechaCreacion, UltimaModificacion)
VALUES('maria','e6b87050bfcb8143fcb8db0170a4dc9ed00d904ddd3e2a4ad1b1e8dc0fdc9be7', GETDATE(), GETDATE())
INSERT INTO RANDOM.USUARIO(Username,Pass, FechaCreacion, UltimaModificacion)
VALUES('jose','e6b87050bfcb8143fcb8db0170a4dc9ed00d904ddd3e2a4ad1b1e8dc0fdc9be7', GETDATE(), GETDATE())

INSERT INTO RANDOM.USUARIO_POR_ROL(IdUsuario,IdRol)
SELECT U.IdUsuario, 1
FROM RANDOM.USUARIO U, RANDOM.ROL R
WHERE R.Descripcion = 'Administrador'

INSERT INTO RANDOM.USUARIO (Username, Pass, FechaCreacion, UltimaModificacion)
SELECT DISTINCT M.Paciente_Dni, 'e6b87050bfcb8143fcb8db0170a4dc9ed00d904ddd3e2a4ad1b1e8dc0fdc9be7', GETDATE(), GETDATE()
FROM gd_esquema.Maestra M



INSERT INTO RANDOM.USUARIO (Username, Pass, FechaCreacion, UltimaModificacion)
SELECT DISTINCT M.Medico_Dni, 'e6b87050bfcb8143fcb8db0170a4dc9ed00d904ddd3e2a4ad1b1e8dc0fdc9be7', GETDATE(), GETDATE()
FROM gd_esquema.Maestra M
WHERE M.Medico_Mail IS NOT NULL

	
/*ESTADO CIVIL*/
INSERT INTO RANDOM.ESTADO_CIVIL(Descripcion)
VALUES('Soltero')
INSERT INTO RANDOM.ESTADO_CIVIL(Descripcion)
VALUES('Casado')
INSERT INTO RANDOM.ESTADO_CIVIL(Descripcion)
VALUES('Viudo')
INSERT INTO RANDOM.ESTADO_CIVIL(Descripcion)
VALUES('Divorciado')
INSERT INTO RANDOM.ESTADO_CIVIL(Descripcion)
VALUES('Concubinato')

/*TIPO DE CANCELACION*/
INSERT INTO RANDOM.TIPO_CANCELACION(Descripcion)
VALUES ('Repentina')
INSERT INTO RANDOM.TIPO_CANCELACION(Descripcion)
VALUES ('Viaje Programado')
INSERT INTO RANDOM.TIPO_CANCELACION(Descripcion)
VALUES ('Fuerza Mayor')
INSERT INTO RANDOM.TIPO_CANCELACION(Descripcion)
VALUES ('Superposición de horarios')
INSERT INTO RANDOM.TIPO_CANCELACION(Descripcion)
VALUES ('Enfermedad')
INSERT INTO RANDOM.TIPO_CANCELACION(Descripcion)
VALUES ('Urgencia')
INSERT INTO RANDOM.TIPO_CANCELACION(Descripcion)
VALUES ('Otros')

/*TIPO DE DOCUMENTOS*/
INSERT INTO RANDOM.TIPOS_DOCUMENTOS(Descripcion)
VALUES ('D.N.I.')
INSERT INTO RANDOM.TIPOS_DOCUMENTOS(Descripcion)
VALUES ('Libreta de enrolamiento')
INSERT INTO RANDOM.TIPOS_DOCUMENTOS(Descripcion)
VALUES ('Libreta Civica')
INSERT INTO RANDOM.TIPOS_DOCUMENTOS(Descripcion)
VALUES ('Cédula de Identidad')
INSERT INTO RANDOM.TIPOS_DOCUMENTOS(Descripcion)
VALUES ('Pasaporte')


/*PERSONA*/ -- agregamos los afiliados nada mas aca
INSERT INTO RANDOM.PERSONA(Nombre, Apellido, Documento, Direccion, Telefono, Mail, Fecha_Nac, IdUsuario) 
SELECT DISTINCT M.Paciente_Nombre, M.Paciente_Apellido, M.Paciente_Dni, M.Paciente_Direccion, M.Paciente_Telefono, M.Paciente_Mail, M.Paciente_Fecha_Nac,u.IdUsuario
FROM gd_esquema.Maestra M
join random.USUARIO u on u.Username = cast(M.Paciente_Dni as nvarchar)


/*PERSONA*/ -- agregamos los medicos nada mas aca
INSERT INTO RANDOM.PERSONA(Nombre, Apellido, Documento, Direccion, Telefono, Mail, Fecha_Nac, IdUsuario) 
SELECT DISTINCT M.Medico_Nombre, M.Medico_Apellido, M.Medico_Dni, M.Medico_Direccion, M.Medico_Telefono, M.Medico_Mail, M.Medico_Fecha_Nac, u.IdUsuario
FROM gd_esquema.Maestra M
join random.USUARIO u on u.Username = cast(M.Medico_Dni as nvarchar)

/*PERSONA*/ -- agregamos los usuarios de prueba
INSERT INTO RANDOM.PERSONA(Nombre, Apellido, Sexo, IdTipoDocumento, Documento, Direccion, Telefono, Mail, Fecha_Nac, IdUsuario)
VALUES('Administrador', 'General', NULL, 1, 11119111, 'Casa Rosada', 46512356, 'sarasa@sarasa.com',GETDATE(), 1)
INSERT INTO RANDOM.PERSONA(Nombre, Apellido, Sexo, IdTipoDocumento, Documento, Direccion, Telefono, Mail, Fecha_Nac, IdUsuario)
VALUES('ana','ana', NULL, 1, 11118111, 'Casa Rosada', 46512956, 'sarasa@sarasa.com',GETDATE(), 2)
INSERT INTO RANDOM.PERSONA( Nombre, Apellido, Sexo, IdTipoDocumento, Documento, Direccion, Telefono, Mail, Fecha_Nac, IdUsuario)
VALUES('maria','maria', NULL, 1, 17111111, 'Casa Rosada', 46512356, 'sarasa@sarasa.com',GETDATE(), 3)
INSERT INTO RANDOM.PERSONA( Nombre, Apellido, Sexo, IdTipoDocumento, Documento, Direccion, Telefono, Mail, Fecha_Nac, IdUsuario)
VALUES('jose','jose', NULL, 1, 11111711, 'Casa Rosada', 46512356, 'sarasa@sarasa.com',GETDATE(), 4)

/*inserto los roles de los ususarios afiliados y medicos*/
INSERT INTO RANDOM.USUARIO_POR_ROL(IdUsuario,IdRol)
SELECT distinct u.IdUsuario, 2
FROM gd_esquema.Maestra M
JOIN RANDOM.PERSONA P ON M.Medico_Dni = P.Documento
join random.USUARIO u on u.IdUsuario = p.IdUsuario

INSERT INTO RANDOM.USUARIO_POR_ROL(IdUsuario,IdRol)
SELECT distinct u.IdUsuario, 3
FROM gd_esquema.Maestra M
JOIN RANDOM.PERSONA P ON M.Paciente_Dni = P.Documento
join random.USUARIO u on u.IdUsuario = p.IdUsuario

/*PLANES*/
INSERT INTO RANDOM.PLANES(Codigo,Nombre, MontoConsulta, MontoExpendio)
SELECT DISTINCT M.Plan_Med_Codigo, M.Plan_Med_Descripcion, M.Plan_Med_Precio_Bono_Consulta, M.Plan_Med_Precio_Bono_Farmacia
FROM gd_esquema.Maestra M

/*Bonos de los planes seteo*/
UPDATE RANDOM.PLANES
SET Abono = 150
WHERE IdPlan = 1;
UPDATE RANDOM.PLANES
SET Abono = 110
WHERE IdPlan = 2;
UPDATE RANDOM.PLANES
SET Abono = 130
WHERE IdPlan = 3;
UPDATE RANDOM.PLANES
SET Abono = 120
WHERE IdPlan = 4;
UPDATE RANDOM.PLANES
SET Abono = 140
WHERE IdPlan = 5;

/*AFILIADO*/
INSERT INTO RANDOM.AFILIADO(IdPersona, IdPlan, NumeroAfiliadoRaiz)
SELECT DISTINCT P.IdPersona, PL.IdPlan, P.IdPersona
FROM gd_esquema.Maestra M
JOIN RANDOM.PERSONA P ON M.Paciente_Nombre = P.Nombre AND M.Paciente_Apellido = P.Apellido AND M.Paciente_Dni = P.Documento
JOIN RANDOM.PLANES PL ON M.Plan_Med_Codigo = PL.Codigo

--FALTAN numero ultimo bono que no me acuerdo de nuevo para que era. Cubi.  /  seteo de estado civil?

/*TIPO_ESPECIALIDAD*/
INSERT INTO RANDOM.TIPO_ESPECIALIDAD(Codigo,Descripcion)
SELECT DISTINCT M.Tipo_Especialidad_Codigo, M.Tipo_Especialidad_Descripcion
FROM gd_esquema.Maestra M
where M.Tipo_Especialidad_Codigo IS NOT NULL

/*ESPECIALIDAD*/
INSERT INTO RANDOM.ESPECIALIDAD(Codigo,Descripcion, IdTipoEspecialidad)
SELECT DISTINCT M.Especialidad_Codigo, M.Especialidad_Descripcion, E.IdTipoEspecialidad
FROM gd_esquema.Maestra M
JOIN RANDOM.TIPO_ESPECIALIDAD E ON M.Tipo_Especialidad_Codigo = E.Codigo 

/*PROFESIONAL*/ 
INSERT INTO RANDOM.PROFESIONAL(IdProfesional)
SELECT DISTINCT P.IdPersona
FROM gd_esquema.Maestra M
JOIN RANDOM.PERSONA P ON M.Medico_Nombre =P.Nombre AND M.Medico_Apellido = P.Apellido AND M.Medico_Dni = P.Documento

/*HISTORIAL_PLAN*/ -- inserto el primer plan de todas las personas de la base
-- y si ponemos la fecha de nacimiento en vez de esa fecha?? 
INSERT INTO RANDOM.HISTORIAL_PLAN(IdAfiliado, Fecha, IdPlan)
SELECT DISTINCT A.IdPersona, CONVERT(DATETIME, '1957-10-24 00:00:00.000', 21), A.IdPlan
FROM RANDOM.AFILIADO A

/*ESPECIALIDAD_POR_PROFESIONAL*/
INSERT RANDOM.ESPECIALIDAD_POR_PROFESIONAL (IdProfesional, IdEspecialidad)
SELECT DISTINCT P.IdPersona, E.IdEspecialidad
FROM RANDOM.PERSONA P, gd_esquema.Maestra M, RANDOM.ESPECIALIDAD E
WHERE M.Medico_Dni = P.Documento and  E.Codigo = M.Especialidad_Codigo

/*COMPRA_BONO*/
INSERT RANDOM.COMPRA_BONO (IdAfiliado, Fecha)
SELECT DISTINCT P.IdPersona, M.Compra_Bono_Fecha
FROM RANDOM.PERSONA P 
JOIN gd_esquema.Maestra M on P.Documento = M.Paciente_Dni AND M.Compra_Bono_Fecha IS NOT NULL


/*BONO*/
INSERT RANDOM.BONO (IdCompra, Precio, IdPlan, CompraBonoFecha, ConsultaNumero)
SELECT DISTINCT C.IdCompra, PL.MontoConsulta, PL.IdPlan, M.Compra_Bono_Fecha,M.Bono_Consulta_Numero
FROM RANDOM.PERSONA P 
JOIN gd_esquema.Maestra M on P.Documento = M.Paciente_Dni
JOIN RANDOM.COMPRA_BONO C ON  M.Compra_Bono_Fecha = C.Fecha AND C.IdAfiliado = P.IdPersona
JOIN RANDOM.AFILIADO A ON P.IdPersona = A.IdPersona
JOIN RANDOM.PLANES PL ON A.IdPlan = PL.IdPlan
where M.Bono_Consulta_Fecha_Impresion IS NOT NULL
AND  M.Bono_Consulta_Numero IS NOT NULL

/*Inserto precio de las compras teniendo el precio en la tabla bonos ahora*/
SELECT B.IdCompra as ID, SUM (B.Precio) AS PRECIO
INTO #TEMPORALPRECIOS
FROM RANDOM.COMPRA_BONO CB, RANDOM.BONO b
WHERE B.IdCompra = CB.IdCompra
GROUP BY B.IdCompra

update RANDOM.COMPRA_BONO 
set MontoTotal = T.PRECIO
FROM #TEMPORALPRECIOS T, RANDOM.COMPRA_BONO CB
where T.ID = CB.IdCompra

DROP TABLE #TEMPORALPRECIOS

--UPDATE de las cantidades de las compras para la migracion
UPDATE RANDOM.COMPRA_BONO
SET   Cantidad = joinBonoCompra.CANTIDAD
FROM (SELECT B.IdCompra , COUNT (B.IdBONO) AS 'CANTIDAD'
		FROM RANDOM.BONO B, RANDOM.COMPRA_BONO C
		WHERE B.IdCompra = C.IdCompra
		GROUP BY B.IdCompra) AS joinBonoCompra
WHERE joinBonoCompra.IdCompra = RANDOM.COMPRA_BONO.IdCompra


	/*AGENDA_HORARIO_DISPONIBLE*/
insert INTO RANDOM.AGENDA_HORARIO_DISPONIBLE 
SELECT DISTINCT P.IdPersona, ES.IdEspecialidad,  min(datepart(hour,m.Turno_Fecha)) as 'Hora Desde', max(datepart(hour,m.Turno_Fecha)) + 1 as 'Hora Hasta',DATepart(weekday, M.Turno_Fecha) AS 'DIA DE SEMANA', 0 
FROM gd_esquema.Maestra M
JOIN RANDOM.PERSONA P ON M.Medico_Dni = P.Documento
JOIN RANDOM.ESPECIALIDAD ES ON ES.Codigo = M.Especialidad_Codigo 
where M.Turno_Fecha IS NOT NULL
group by P.IdPersona, ES.IdEspecialidad, DATepart(weekday, M.Turno_Fecha)


/*TURNO*/
/*INSERT INTO RANDOM.TURNO (IdTurno, IdAgenda, FechaYHoraTurno, IdAfiliado, IdEspecialidad)
SELECT DISTINCT M.Turno_Numero, hd.IdAgenda, M.Turno_Fecha, P.IdPersona, E.IdEspecialidad
FROM gd_esquema.Maestra M
JOIN RANDOM.PERSONA P ON P.Documento = M.Paciente_Dni
JOIN RANDOM.ESPECIALIDAD E ON E.Codigo = M.Especialidad_Codigo
JOIN RANDOM.ESPECIALIDAD_POR_PROFESIONAL EP ON EP.IdEspecialidad = E.IdEspecialidad 
JOIN RANDOM.PERSONA PE ON EP.IdProfesional = PE.IdPersona AND PE.Documento = M.Medico_Dni
JOIN RANDOM.AGENDA_HORARIO_DISPONIBLE HD ON DATepart(WEEKDAY, M.Turno_Fecha) = HD.nombreDia AND HD.IdProfesional = EP.IdProfesional
where M.Turno_Numero IS NOT NULL 
	AND M.Turno_Fecha IS NOT NULL
	AND M.Bono_Consulta_Fecha_Impresion IS NOT NULL
	AND M.Consulta_Sintomas IS NOT NULL*/

INSERT INTO RANDOM.TURNO (IdTurno, IdAgenda, FechaYHoraTurno, IdAfiliado, IdEspecialidad)
SELECT DISTINCT M.Turno_Numero, hd.IdAgenda, M.Turno_Fecha, P.IdPersona, HD.IdEspecialidad
FROM gd_esquema.Maestra M
JOIN RANDOM.PERSONA P ON P.Documento = M.Paciente_Dni
JOIN RANDOM.ESPECIALIDAD E ON E.Codigo = M.Especialidad_Codigo
JOIN RANDOM.PERSONA PE ON PE.Documento = M.Medico_Dni
JOIN RANDOM.ESPECIALIDAD_POR_PROFESIONAL EP ON EP.IdEspecialidad = E.IdEspecialidad and ep.IdProfesional= pe.IdPersona
JOIN RANDOM.AGENDA_HORARIO_DISPONIBLE HD ON DATepart(WEEKDAY, M.Turno_Fecha) = HD.Dia AND HD.IdProfesional = pe.IdPersona AND HD.IdEspecialidad = EP.IdEspecialidad
where M.Turno_Numero IS NOT NULL 
	AND M.Turno_Fecha IS NOT NULL
	AND M.Bono_Consulta_Fecha_Impresion IS NOT NULL
	AND M.Consulta_Sintomas IS NOT NULL
ORDER BY Turno_Numero


/*RESULTADO_TURNO*/
INSERT INTO RANDOM.RESULTADO_TURNO(IdTurno, Sintomas, Enfermedades, Fecha)
SELECT DISTINCT T.IdTurno, M.Consulta_Sintomas, M.Consulta_Enfermedades, M.Turno_Fecha
FROM gd_esquema.Maestra M, RANDOM.TURNO T
WHERE T.IdTurno = M.Turno_Numero
	AND M.Turno_Numero IS NOT NULL
	AND M.Consulta_Sintomas IS NOT NULL
	AND M.Consulta_Enfermedades IS NOT NULL
	


INSERT TABLA_DE_DIAS_NUMERO (DiaLetra, DiaNumero)
VALUES ('domingo', 1)
INSERT TABLA_DE_DIAS_NUMERO (DiaLetra, DiaNumero)
VALUES ('lunes', 2)
INSERT TABLA_DE_DIAS_NUMERO (DiaLetra, DiaNumero)
VALUES ('martes', 3)
INSERT TABLA_DE_DIAS_NUMERO (DiaLetra, DiaNumero)
VALUES ('miércoles', 4)
INSERT TABLA_DE_DIAS_NUMERO (DiaLetra, DiaNumero)
VALUES ('jueves', 5)
INSERT TABLA_DE_DIAS_NUMERO (DiaLetra, DiaNumero)
VALUES ('viernes', 6)
INSERT TABLA_DE_DIAS_NUMERO (DiaLetra, DiaNumero)
VALUES ('sábado', 7)

---------------FUNCIONES-----------



/* USUARIO */

GO
	CREATE FUNCTION RANDOM.ROL_CORRECTO(@USUARIO VARCHAR(255), @ROL VARCHAR(255))
	RETURNS int
	AS
	BEGIN
		DECLARE @CANTIDAD INT
		SELECT @CANTIDAD = COUNT (UR.IdUsuario) FROM RANDOM.USUARIO_POR_ROL UR
		JOIN RANDOM.USUARIO U ON U.Username = @USUARIO
		JOIN RANDOM.PERSONA P ON P.IdUsuario = U.IdUsuario
		JOIN RANDOM.ROL R ON R.Descripcion = @ROL
		WHERE UR.IdUsuario = P.IdUsuario AND UR.IdRol = R.IdRol and ur.Habilitada = 1
		RETURN @CANTIDAD
	END
GO

GO
	CREATE FUNCTION RANDOM.EXISTE_USUARIO(@USUARIO VARCHAR(255)) 
	RETURNS int
	AS
	BEGIN
		DECLARE @CANTIDAD INT
		
		SELECT @CANTIDAD = COUNT(UPR.IdUsuario) FROM RANDOM.USUARIO_POR_ROL UPR, RANDOM.USUARIO U
		WHERE U.Username = @USUARIO AND
			UPR.IdUsuario = U.IdUsuario AND
			  UPR.Habilitada = 1
		
		RETURN @CANTIDAD
	END
GO


CREATE FUNCTION RANDOM.PASSWORD_CORRECTA(@USUARIO VARCHAR(255),@PASSWORD VARCHAR(64)) 
RETURNS int
AS
BEGIN
	DECLARE @HASH_PASS NVARCHAR(255), @CANTIDAD INT
	SET @HASH_PASS =  @PASSWORD
	SELECT @CANTIDAD = COUNT(Username) FROM RANDOM.USUARIO
	WHERE Habilitada = 1 AND
		  Username = @USUARIO AND
		  Pass = @HASH_PASS
	RETURN @CANTIDAD
END
GO

CREATE TRIGGER RANDOM.AFTER_LOGIN ON RANDOM.USUARIO AFTER UPDATE AS
BEGIN
	DECLARE @ACCESO INT, @IDUSUARIO INT, @HABILITADA INT, @INTENTOS_FALLIDOS_ACTUAL INT
	SELECT @ACCESO = ACCESO, @IDUSUARIO = IdUsuario FROM INSERTED
	
	SELECT @HABILITADA = Habilitada, @INTENTOS_FALLIDOS_ACTUAL = IntentosFallidos FROM RANDOM.USUARIO
	WHERE IdUsuario = @IDUSUARIO
	
	IF @ACCESO = 1
	BEGIN
		UPDATE RANDOM.USUARIO SET 
			IntentosFallidos = 0
		WHERE IdUsuario = @IDUSUARIO
	END
	ELSE
	BEGIN
		IF @INTENTOS_FALLIDOS_ACTUAL = 2
		UPDATE RANDOM.USUARIO SET
			IntentosFallidos = IntentosFallidos + 1,
			Habilitada = 0
		WHERE IdUsuario = @IDUSUARIO
		ELSE
		UPDATE RANDOM.USUARIO SET
			IntentosFallidos = IntentosFallidos + 1,
			Habilitada = @HABILITADA
		WHERE IdUsuario = @IDUSUARIO
	END
END 
GO

CREATE PROCEDURE RANDOM.INTENTO_LOGIN(@USUARIO VARCHAR(255),@ACCESO INT) AS
BEGIN 
	UPDATE RANDOM.USUARIO SET
		Acceso = @ACCESO
	WHERE Username = @USUARIO
END 
GO

CREATE PROCEDURE RANDOM.BAJA_USUARIO(@ID INT) AS
BEGIN
	UPDATE RANDOM.USUARIO SET
		Habilitada = 0
	WHERE IdUsuario = @ID
END
GO

CREATE PROCEDURE RANDOM.HABILITAR_USUARIO(@USERNAME VARCHAR(255)) AS
BEGIN
	UPDATE RANDOM.USUARIO SET
		Habilitada = 1
	WHERE USERNAME = @USERNAME
END
GO



/*  ROL */


CREATE PROCEDURE RANDOM.BAJA_ROL(@ROL  INT) AS
BEGIN 
	UPDATE RANDOM.ROL SET
		Estado = 0
	WHERE IdRol = @ROL
	UPDATE RANDOM.USUARIO_POR_ROL SET
		Habilitada = 0
	WHERE IdRol = @ROL
	UPDATE RANDOM.USUARIO_POR_ROL SET
		Habilitada = 0
	FROM RANDOM.USUARIO_POR_ROL UPR, RANDOM.USUARIO U
	WHERE U.IdUsuario = UPR.IdUsuario
		AND UPR.IdRol = @ROL
END 
GO

CREATE PROCEDURE RANDOM.ACTIVAR_ROL(@NOMBRE VARCHAR(50)) AS
BEGIN 
	UPDATE RANDOM.ROL SET
		Estado = 1
	WHERE Descripcion = @NOMBRE
END 
GO

GO
CREATE FUNCTION RANDOM.ROL_HABILITADO(@NOMBRE NVARCHAR(255)) 
	RETURNS int
	AS
	BEGIN
		DECLARE @CANTIDAD INT
		
		SELECT @CANTIDAD = COUNT(Descripcion) FROM RANDOM.ROL
		WHERE Descripcion = @NOMBRE AND
			  ESTADO = 1
		RETURN @CANTIDAD
	END
GO

GO 
CREATE PROCEDURE RANDOM.CREAR_ROL ( @NOMBRE VARCHAR (255)) AS 
BEGIN 
IF (( NOT EXISTS ( SELECT * FROM RANDOM.ROL WHERE Descripcion = @NOMBRE )))
	INSERT INTO RANDOM.ROL (Estado, Descripcion)
	VALUES (1, @NOMBRE) 
ELSE
	 RAISERROR ('El Rol ya existe', 16, 217) WITH SETERROR
 END 
GO

CREATE PROCEDURE RANDOM.ASIGNAR_ROL(@USUARIO int, @ROL int)
AS BEGIN
	INSERT INTO RANDOM.USUARIO_POR_ROL(IdUsuario, IdRol)
	VALUES (@USUARIO, @ROL)
END
GO


CREATE PROCEDURE RANDOM.ASIGNAR_FUNCIONALIDAD(@FUNCIONALIDAD int, @ROL int)
AS BEGIN
INSERT INTO RANDOM.ROL_POR_FUNCIONALIDADES (IdFuncionalidad, IdRol)
VALUES (@FUNCIONALIDAD, @ROL)
END
GO


CREATE PROCEDURE RANDOM.MODIFICAR_NOMBRE_ROL(@NOMBRE VARCHAR(255), @ROL INT) AS
BEGIN 
IF (( NOT EXISTS ( SELECT * FROM RANDOM.ROL WHERE Descripcion = @NOMBRE )))
	UPDATE RANDOM.ROL SET
		Descripcion = @NOMBRE
	WHERE IdRol = @ROL
ELSE
	 RAISERROR ('El Rol ya existe', 16, 217) WITH SETERROR
END
GO

CREATE PROCEDURE RANDOM.ELIMINAR_FUNCIONALIDAD_DEL_ROL (@FUNCIONALIDAD INT, @ROL INT) AS
BEGIN
	DELETE FROM RANDOM.ROL_POR_FUNCIONALIDADES
	WHERE IdFuncionalidad = @FUNCIONALIDAD 
		AND IdRol = @ROL
END
GO

GO
CREATE FUNCTION RANDOM.EXISTE_ROL(@NOMBRE NVARCHAR(255)) 
	RETURNS int
	AS
	BEGIN
		DECLARE @CANTIDAD INT
		
		SELECT @CANTIDAD = COUNT(Descripcion) FROM RANDOM.ROL
		WHERE Descripcion = @NOMBRE 		
		RETURN @CANTIDAD
	END
GO

GO
CREATE FUNCTION RANDOM.EXISTE_FUNCIONALIDAD_ROL(@FUNC INT, @ROL INT) 
	RETURNS int
	AS
	BEGIN
		DECLARE @CANTIDAD INT
		
		SELECT @CANTIDAD = COUNT(IdFuncionalidad) FROM RANDOM.ROL_POR_FUNCIONALIDADES
		WHERE IdFuncionalidad = @FUNC AND
			  IdRol = @ROL
		RETURN @CANTIDAD
	END
GO

GO
CREATE FUNCTION RANDOM.EXISTE_USUARIO_ROL(@USU INT, @ROL INT) 
	RETURNS int
	AS
	BEGIN
		DECLARE @CANTIDAD INT
		
		SELECT @CANTIDAD = COUNT(IdUsuario) FROM RANDOM.USUARIO_POR_ROL
		WHERE IdUsuario = @USU AND
			  IdRol = @ROL
		RETURN @CANTIDAD
	END
GO

GO
CREATE FUNCTION RANDOM.GET_ID_ROL(@NOMBRE NVARCHAR(255))
RETURNS INT
AS BEGIN
	DECLARE @IDROL INT
	
	SELECT @IDROL = IdRol FROM RANDOM.ROL
	WHERE Descripcion = @NOMBRE
	
	RETURN @IDROL
END

GO
CREATE PROCEDURE RANDOM.GET_ROLES AS
BEGIN
	SELECT * FROM RANDOM.ROL
END
GO

GO
CREATE PROCEDURE RANDOM.GET_ROLES_ESTADO AS
BEGIN
	--DECLARE @ESTADO int
	--SELECT @ESTADO = Estado FROM RANDOM.ROL

	--IF (@ESTADO = 1)
	--	SELECT IdRol, Descripcion, 'Activo' AS Estado  FROM RANDOM.ROL
	--	Order by IdRol
	--ELSE
	--	SELECT IdRol, Descripcion, 'Inactivo' AS Estado  FROM RANDOM.ROL
	--	order by IdRol
	SELECT IdRol, Descripcion, Estado FROM RANDOM.ROL
		Order by IdRol

END
GO

GO
CREATE PROCEDURE RANDOM.GET_USUARIOS AS
BEGIN
	SELECT * FROM RANDOM.USUARIO
	Order by Username
END
GO

GO
CREATE FUNCTION RANDOM.GET_ID_USUARIO(@NOMBRE NVARCHAR(255))
RETURNS INT
AS BEGIN
	DECLARE @IDUSUARIO INT
	
	SELECT @IDUSUARIO = IdUsuario FROM RANDOM.USUARIO
	WHERE Username = @NOMBRE
	
	RETURN @IDUSUARIO
END
GO


GO
CREATE FUNCTION RANDOM.GET_ID_PERSONA(@DNI NUMERIC(18,0))
RETURNS INT
AS BEGIN
	DECLARE @IDPERSONA INT
	SELECT @IDPERSONA = IdPersona FROM RANDOM.PERSONA
	WHERE Documento = @DNI
	RETURN @IDPERSONA
END
GO

--------------AFILIADO--------------


GO
CREATE PROCEDURE RANDOM.GET_AFILIADOS(@DNI NUMERIC(18,0))AS
BEGIN
	SELECT A.IdPersona, P.Apellido, P.Nombre,P.Documento, P.Telefono, P.Direccion, P.Fecha_Nac, P.Sexo, P.IdTipoDocumento , A.IdPlan, A.IdEstadoCivil, A.CantidadACargo, P.Mail ,A.NumeroAfiliadoRaiz, A.NumeroAfiliadoExt
	FROM RANDOM.AFILIADO A, RANDOM.PERSONA P
	WHERE P.Documento = @DNI
		AND P.IdPersona = A.IdPersona
		AND A.Estado = 1
		
END
GO

GO
CREATE FUNCTION RANDOM.EXISTE_AFILIADO(@DNI NUMERIC(18,0)) 
	RETURNS int
	AS
	BEGIN
		DECLARE @CANTIDAD INT
		
		SELECT @CANTIDAD = COUNT(A.IdPersona) FROM RANDOM.AFILIADO A, RANDOM.PERSONA P
		WHERE A.IdPersona = P.IdPersona AND
			 P.Documento = @DNI AND
			 A.Estado = 1
		RETURN @CANTIDAD
	END
GO



GO
CREATE PROCEDURE RANDOM.GET_ESTADO_CIVIL AS
BEGIN
	SELECT * FROM RANDOM.ESTADO_CIVIL
END
GO

GO
CREATE PROCEDURE RANDOM.GET_PLANES AS
BEGIN
	SELECT * FROM RANDOM.PLANES
END
GO

GO
CREATE PROCEDURE RANDOM.GET_TIPO_DOCUMENTO AS
BEGIN
	SELECT * FROM RANDOM.TIPOS_DOCUMENTOS
END
GO

GO
CREATE FUNCTION RANDOM.GET_ID_TIPO_DOC(@DESCRIPCION nvarchar(255))
RETURNS INT
AS BEGIN
	DECLARE @IDTIPODOC INT
	SELECT @IDTIPODOC = IdTipoDocumento FROM RANDOM.TIPOS_DOCUMENTOS
	WHERE Descripcion = @DESCRIPCION
	RETURN @IDTIPODOC
END
GO

GO
CREATE FUNCTION RANDOM.GET_ID_ESTADO_CIVIL(@DESCRIPCION nvarchar(255))
RETURNS INT
AS BEGIN
	DECLARE @IDESTADOCIVIL INT
	SELECT @IDESTADOCIVIL = IdEstadoCivil FROM RANDOM.ESTADO_CIVIL
	WHERE Descripcion = @DESCRIPCION
	RETURN @IDESTADOCIVIL
END
GO

GO
CREATE FUNCTION RANDOM.GET_ID_PLAN(@NOMBRE nvarchar(255))
RETURNS INT
AS BEGIN
	DECLARE @IDPLAN INT
	SELECT @IDPLAN = IdPlan FROM RANDOM.PLANES
	WHERE Nombre = @NOMBRE
	RETURN @IDPLAN
END
GO


GO 
CREATE PROCEDURE RANDOM.CREAR_AFILIADO (@NOMBRE nvarchar(255),  
										@APELLIDO nvarchar(255), 
										@SEXO nvarchar(255), 
										@IDTIPODOC int, 
										@DOCUMENTO numeric(18,0),
										@DIRECCION nvarchar(255),
										@TELEFONO numeric(18,0),
										@MAIL nvarchar(255),
										@FECHANAC datetime,
										@IDESTADOCIVIL int,
										@FAMILIARESACARGO int,
										@IDPLAN int) AS 
BEGIN 
	INSERT INTO RANDOM.PERSONA (Nombre, Apellido, Sexo, IdTipoDocumento, Documento, Direccion, Telefono, Mail, Fecha_Nac)
	VALUES (@NOMBRE, @APELLIDO, @SEXO, @IDTIPODOC, @DOCUMENTO, @DIRECCION, @TELEFONO, @MAIL, @FECHANAC)

	DECLARE @NRO_AFILIADO INT
	SELECT @NRO_AFILIADO= MAX(NumeroAfiliadoRaiz) +1 FROM RANDOM.AFILIADO

	SELECT P.IdPersona 
	FROM RANDOM.PERSONA P
	WHERE P.Documento = @DOCUMENTO

	INSERT INTO RANDOM.AFILIADO (IdPersona, IdEstadoCivil, CantidadACargo, IdPlan, NumeroAfiliadoRaiz)
	VALUES((SELECT P.IdPersona FROM RANDOM.PERSONA P WHERE P.Documento = @DOCUMENTO), @IDESTADOCIVIL, @FAMILIARESACARGO, @IDPLAN, @NRO_AFILIADO)

	SELECT A.IdPersona
	FROM RANDOM.AFILIADO A, RANDOM.PERSONA P
	WHERE A.IdPersona = P.IdPersona
		AND P.Documento = @DOCUMENTO

	INSERT INTO RANDOM.HISTORIAL_PLAN(IdAfiliado, IdPlan, Fecha, Motivo)
	VALUES((SELECT A.IdPersona FROM RANDOM.AFILIADO A, RANDOM.PERSONA P WHERE A.IdPersona = P.IdPersona AND P.Documento = @DOCUMENTO), @IDPLAN, GETDATE(), 'Inscripcion Afiliado Principal')
END 
GO

--GO
--CREATE PROCEDURE RANDOM_NUMERO_AFILIADO_RAIZ (@IDPERSONA INT)AS
--BEGIN
--DECLARE @NRO_AFILIADO INT
--SELECT @NRO_AFILIADO= MAX(NumeroAfiliadoRaiz) +1 FROM RANDOM.AFILIADO
	
--	UPDATE RANDOM.AFILIADO SET
--	NumeroAfiliadoRaiz = @NRO_AFILIADO
--	WHERE IdPersona = @IDPERSONA 
--END
--GO


GO 
CREATE PROCEDURE RANDOM.CREAR_FAMILIAR (@NOMBRE nvarchar(255),  
										@APELLIDO nvarchar(255), 
										@SEXO nvarchar(255), 
										@IDTIPODOC int, 
										@DOCUMENTO numeric(18,0),
										@DIRECCION nvarchar(255),
										@TELEFONO numeric(18,0),
										@MAIL nvarchar(255),
										@FECHANAC datetime,
										@IDPLAN int,
										@IDESTADOCIVIL int,
										@NRO_AFILIADO_RAIZ int) AS 
BEGIN 

DECLARE @FAMILIARESACARGAR INT
SELECT @FAMILIARESACARGAR = FamiliaresCargados FROM RANDOM.AFILIADO WHERE NumeroAfiliadoRaiz = @NRO_AFILIADO_RAIZ AND NumeroAfiliadoExt = '01'

DECLARE @FAMILIARESACARGO INT
SELECT @FAMILIARESACARGO = CantidadACargo FROM RANDOM.AFILIADO WHERE NumeroAfiliadoRaiz = @NRO_AFILIADO_RAIZ AND NumeroAfiliadoExt = '01'

IF ( @FAMILIARESACARGO > @FAMILIARESACARGAR)
	
	BEGIN 
	INSERT INTO RANDOM.PERSONA (Nombre, Apellido, Sexo, IdTipoDocumento, Documento, Direccion, Telefono, Mail, Fecha_Nac)
	VALUES (@NOMBRE, @APELLIDO, @SEXO, @IDTIPODOC, @DOCUMENTO, @DIRECCION, @TELEFONO, @MAIL, @FECHANAC)

	SELECT P.IdPersona 
	FROM RANDOM.PERSONA P
	WHERE P.Documento = @DOCUMENTO

	INSERT INTO RANDOM.AFILIADO (IdPersona,NumeroAfiliadoRaiz, IdPlan, IdEstadoCivil)
	VALUES((SELECT P.IdPersona FROM RANDOM.PERSONA P WHERE P.Documento = @DOCUMENTO), @NRO_AFILIADO_RAIZ, @IdPlan, (@IdEstadoCivil + 1))

	UPDATE RANDOM.AFILIADO SET
	FamiliaresCargados = FamiliaresCargados +1
	FROM RANDOM.AFILIADO A, RANDOM.PERSONA P
	WHERE A.NumeroAfiliadoRaiz = @NRO_AFILIADO_RAIZ
		AND A.NumeroAfiliadoExt = '01'

	SELECT A.IdPersona
	FROM RANDOM.AFILIADO A, RANDOM.PERSONA P
	WHERE A.IdPersona = P.IdPersona
		AND P.Documento = @DOCUMENTO

	INSERT INTO RANDOM.HISTORIAL_PLAN(IdAfiliado, IdPlan, Fecha, Motivo)
	VALUES((SELECT A.IdPersona FROM RANDOM.AFILIADO A, RANDOM.PERSONA P WHERE A.IdPersona = P.IdPersona AND P.Documento = @DOCUMENTO), @IDPLAN, GETDATE(), 'Inscripcion Afiliado Principal')

	END

ELSE
	 RAISERROR ('Cantidad de familiares a cargo no puede ser mayor a los que se cargaran', 16, 217) WITH SETERROR


END 
GO

GO 
CREATE PROCEDURE RANDOM.CREAR_CONYUGE	(@NOMBRE nvarchar(255),  
										@APELLIDO nvarchar(255), 
										@SEXO nvarchar(255), 
										@IDTIPODOC int, 
										@DOCUMENTO numeric(18,0),
										@DIRECCION nvarchar(255),
										@TELEFONO numeric(18,0),
										@MAIL nvarchar(255),
										@FECHANAC datetime,
										@IDPLAN int,
										@IDESTADOCIVIL int,
										@NRO_AFILIADO_RAIZ int) AS 
BEGIN 

IF (( NOT EXISTS ( SELECT * FROM RANDOM.AFILIADO WHERE NumeroAfiliadoRaiz = @NRO_AFILIADO_RAIZ AND NumeroAfiliadoExt = '02')))
	
	BEGIN
	INSERT INTO RANDOM.PERSONA (Nombre, Apellido, Sexo, IdTipoDocumento, Documento, Direccion, Telefono, Mail, Fecha_Nac)
	VALUES (@NOMBRE, @APELLIDO, @SEXO, @IDTIPODOC, @DOCUMENTO, @DIRECCION, @TELEFONO, @MAIL, @FECHANAC)

	SELECT P.IdPersona 
	FROM RANDOM.PERSONA P
	WHERE P.Documento = @DOCUMENTO

	INSERT INTO RANDOM.AFILIADO (IdPersona,NumeroAfiliadoRaiz, IdPlan, IdEstadoCivil)
	VALUES((SELECT P.IdPersona FROM RANDOM.PERSONA P WHERE P.Documento = @DOCUMENTO), @NRO_AFILIADO_RAIZ, @IdPlan, (@IdEstadoCivil + 1))

	SELECT A.IdPersona
	FROM RANDOM.AFILIADO A, RANDOM.PERSONA P
	WHERE A.IdPersona = P.IdPersona
		AND P.Documento = @DOCUMENTO

	INSERT INTO RANDOM.HISTORIAL_PLAN(IdAfiliado, IdPlan, Fecha, Motivo)
	VALUES((SELECT A.IdPersona FROM RANDOM.AFILIADO A, RANDOM.PERSONA P WHERE A.IdPersona = P.IdPersona AND P.Documento = @DOCUMENTO), @IDPLAN, GETDATE(), 'Inscripcion Afiliado Principal')


	END
	
ELSE
	 RAISERROR ('Ya hay cónyuge asociado', 16, 217) WITH SETERROR
	
END 
GO




CREATE PROCEDURE RANDOM.MODIFICAR_AFILIADO(@IDPERSONA int,
											@NOMBRE nvarchar(255),  
											@APELLIDO nvarchar(255), 
											@SEXO nvarchar(255), 
											@IDTIPODOC int, 
											@DOCUMENTO numeric(18,0),
											@DIRECCION nvarchar(255),
											@TELEFONO numeric(18,0),
											@MAIL nvarchar(255),
											@FECHANAC datetime,
											@IDESTADOCIVIL int,
											@FAMILIARESACARGO int,
											@IDPLAN int) AS 
BEGIN 
	UPDATE RANDOM.PERSONA SET
		Nombre = @NOMBRE,
		Apellido = @APELLIDO,
		Sexo = @SEXO,
		IdTipoDocumento = @IDTIPODOC,
		Documento = @DOCUMENTO,
		Direccion = @DIRECCION,
		Telefono = @TELEFONO,
		Mail = @MAIL,
		Fecha_Nac = @FECHANAC
	WHERE IdPersona = @IDPERSONA
	UPDATE RANDOM.AFILIADO SET
		IdEstadoCivil = @IDESTADOCIVIL ,
		CantidadACargo = @FAMILIARESACARGO,
		IdPlan = @IDPLAN
	WHERE IdPersona = @IDPERSONA
END
GO

CREATE PROCEDURE RANDOM.BAJA_AFILIADO (@IDPERSONA int) AS
BEGIN
	
			UPDATE RANDOM.AFILIADO SET
			Estado = 0
			WHERE IdPersona = @IDPERSONA

			DELETE FROM RANDOM.TURNO
			WHERE IdAfiliado = @IDPERSONA
			AND Habilitado = '0'

END
GO



CREATE PROCEDURE RANDOM.BAJA_AFILIADO_ASIGNACION (@IDPERSONA int) AS
BEGIN
	DECLARE @NUMERO_AFILIADO_EXT nvarchar(255)
	SELECT @NUMERO_AFILIADO_EXT = NumeroAfiliadoExt FROM RANDOM.AFILIADO WHERE IdPersona = @IDPERSONA
	DECLARE @NUMERO_AFILIADO_RAIZ nvarchar(255)
	SELECT @NUMERO_AFILIADO_RAIZ = NumeroAfiliadoRaiz FROM RANDOM.AFILIADO WHERE IdPersona = @IDPERSONA
	DECLARE @NUMERO_AFILIADO_EXT_MIN INT
			SELECT @NUMERO_AFILIADO_EXT_MIN = MIN(CAST(NumeroAfiliadoExt AS INT)) FROM RANDOM.AFILIADO 
							WHERE Estado = 1
							AND @NUMERO_AFILIADO_RAIZ = NumeroAfiliadoRaiz

			IF (EXISTS (SELECT @NUMERO_AFILIADO_EXT_MIN))
				BEGIN
					UPDATE RANDOM.AFILIADO SET
					NumeroAfiliadoExt = '01'
					WHERE NumeroAfiliadoRaiz = @NUMERO_AFILIADO_RAIZ
					AND NumeroAfiliadoExt = @NUMERO_AFILIADO_EXT_MIN
				END
END
GO




CREATE PROCEDURE RANDOM.CAMBIO_PLAN(@NUMERO_AFILIADO_RAIZ int,
									@IDPLAN int,
									@MOTIVO nvarchar(255))AS
BEGIN
	UPDATE RANDOM.AFILIADO SET
		IdPlan = @IDPLAN + 1
	WHERE NumeroAfiliadoRaiz  = @NUMERO_AFILIADO_RAIZ
		
	DECLARE @IDPERSONA INT
	SELECT @IDPERSONA = MIN(IdPersona) FROM RANDOM.AFILIADO
	WHERE @NUMERO_AFILIADO_RAIZ = NumeroAfiliadoRaiz

	INSERT INTO RANDOM.HISTORIAL_PLAN(IdAfiliado, Fecha, Motivo, IdPlan)
	VALUES (@IDPERSONA, GETDATE(), @MOTIVO, @IDPLAN+1)
	
END
GO



CREATE FUNCTION RANDOM.SIGUIENTE_AFILIADO ()
RETURNS NVARCHAR
AS BEGIN
DECLARE @SIG_NRO_AFILIADO NVARCHAR
DECLARE @SIG_NRO_AFILIADO_NUMERICO INT

	SELECT @SIG_NRO_AFILIADO = MAX(CAST(NumeroAfiliadoExt AS INT)) 
	FROM RANDOM.AFILIADO

	SET @SIG_NRO_AFILIADO_NUMERICO = CAST(@SIG_NRO_AFILIADO AS INT)

	RETURN CONVERT(NVARCHAR,@SIG_NRO_AFILIADO_NUMERICO + 1)
END
GO


CREATE PROCEDURE RANDOM.NRO_AFILIADO_FAMILIARES (@NROAFILIADORAIZ nvarchar(255), @DOCUMENTO numeric(18,0), @CANTIDAD_A_CARGO int) AS
BEGIN 

DECLARE @NRO_AFILIADO_NUMERICO INT 
SELECT @NRO_AFILIADO_NUMERICO = MAX(CAST(NumeroAfiliadoExt AS INT)) FROM RANDOM.AFILIADO


		IF ((@NRO_AFILIADO_NUMERICO = '01') OR (@NRO_AFILIADO_NUMERICO = '02'))
			UPDATE RANDOM.AFILIADO SET
			NumeroAfiliadoExt = '03',
			IdEstadoCivil = '1'
			FROM RANDOM.PERSONA P, RANDOM.AFILIADO A
			WHERE A.NumeroAfiliadoRaiz = @NROAFILIADORAIZ
			AND P.Documento = @DOCUMENTO
			AND P.IdPersona = A.IdPersona
		ELSE 
			UPDATE RANDOM.AFILIADO SET
			NumeroAfiliadoExt =  RIGHT (('0' + RANDOM.SIGUIENTE_AFILIADO ()) ,2),
			IdEstadoCivil = '1'
			FROM RANDOM.PERSONA P, RANDOM.AFILIADO A
			WHERE A.NumeroAfiliadoRaiz = @NROAFILIADORAIZ
			AND P.Documento = @DOCUMENTO
			AND P.IdPersona = A.IdPersona


END 
GO


CREATE PROCEDURE RANDOM.NRO_AFILIADO_CONYUGE (@NROAFILIADORAIZ nvarchar(255), @DOCUMENTO numeric(18,0)) AS
BEGIN

	UPDATE RANDOM.AFILIADO  SET
	NumeroAfiliadoExt = '02'
	FROM RANDOM.PERSONA P, RANDOM.AFILIADO A
	WHERE A.NumeroAfiliadoRaiz = @NROAFILIADORAIZ
	AND P.IdPersona = A.IdPersona
	AND P.Documento = @DOCUMENTO
	AND P.IdPersona = A.IdPersona

	

END
GO

----------- GET------
GO
CREATE PROCEDURE RANDOM.GET_PROFESIONALES AS
BEGIN
	SELECT P.IdPersona, P.Apellido, P.Nombre, P.Documento, P.Fecha_Nac, P.Mail, P.Apellido+', '+P.Nombre AS 'ApellidoNombre'
	FROM RANDOM.PERSONA P, RANDOM.PROFESIONAL PR
	WHERE P.IdPersona = PR.IdProfesional
END
GO

GO
CREATE PROCEDURE RANDOM.GET_HISTORIAL(@NUMERO_AFILIADO_RAIZ int)  AS
BEGIN
SELECT P.Nombre, H.Fecha, H.Motivo 
FROM RANDOM.HISTORIAL_PLAN H, RANDOM.PLANES P, RANDOM.AFILIADO A
WHERE P.IdPlan = H.IdPlan
	AND @NUMERO_AFILIADO_RAIZ = A.NumeroAfiliadoRaiz
	AND A.IdPersona = H.IdAfiliado
END
GO

GO 
CREATE FUNCTION RANDOM.GET_NRO_AFILIADO_RAIZ(@DOCUMENTO numeric(18,0)) 
RETURNS INT
AS BEGIN
DECLARE @NROAFILIADORAIZ INT
		
		SELECT @NROAFILIADORAIZ = NumeroAfiliadoRaiz FROM RANDOM.AFILIADO A, RANDOM.PERSONA P
			WHERE A.IdPersona = P.IdPersona AND
				 P.Documento = @DOCUMENTO
RETURN @NROAFILIADORAIZ
END
GO





--------------- REGISTRO RESULTADO DIAGNOSTICO ---------------
GO
CREATE PROCEDURE RANDOM.TURNO_CONCRETADO(@TURNO int, @FECHA datetime, @SINTOMAS nvarchar(255), @ENFERMEDAD nvarchar(255)) AS
BEGIN
	IF ( EXISTS ( SELECT * FROM RANDOM.TURNO WHERE IdTurno = @TURNO ))
	BEGIN
		UPDATE RANDOM.TURNO SET
			habilitado = 1
		WHERE IdTurno = @TURNO
		
		INSERT INTO RANDOM.RESULTADO_TURNO (IdTurno, Sintomas, Enfermedades, Fecha)
		VALUES (@TURNO, @SINTOMAS, @ENFERMEDAD, @FECHA)
	END
	ELSE
		RAISERROR ('No existe el Turno', 16, 217) WITH SETERROR
END
GO

CREATE PROCEDURE RANDOM.TURNO_SIN_CONCRETAR(@TURNO int, @FECHA datetime) AS
BEGIN
	IF ( EXISTS ( SELECT * FROM RANDOM.TURNO WHERE IdTurno = @TURNO ))
	BEGIN
		UPDATE RANDOM.TURNO SET
			habilitado = 1
		WHERE IdTurno = @TURNO
		
		INSERT INTO RANDOM.RESULTADO_TURNO (IdTurno, Fecha)
		VALUES (@TURNO, @FECHA)
	END
	ELSE
		RAISERROR ('No existe el Turno', 16, 217) WITH SETERROR
END
GO


--------------- REGISTRO CANCELACION DE TURNOS ---------------
GO
CREATE PROCEDURE RANDOM.GET_TIPOS_CANCELACION AS
BEGIN
	SELECT * FROM RANDOM.TIPO_CANCELACION
END
GO

CREATE PROCEDURE RANDOM.CANCELAR_TURNO_AFILIADO(@TURNO int, @TIPO int, @MOTIVO nvarchar(255)) AS
BEGIN
	IF ( EXISTS ( SELECT * FROM RANDOM.TURNO WHERE IdTurno = @TURNO ))
	BEGIN
		-- UPDATE RANDOM.TURNO SET
			-- habilitado = 1
		-- WHERE IdTurno = @TURNO
		
		INSERT INTO RANDOM.CANCELACION (IdTipoCancelacion, IdTurno, Motivo)
		VALUES (@TIPO, @TURNO, @MOTIVO)
	END
	ELSE
		RAISERROR ('No existe el Turno', 16, 217) WITH SETERROR
END
GO

CREATE PROCEDURE RANDOM.CANCELAR_TURNO_PROFESIONAL(@PROFESIONAL int,
												   @FECHADESDE datetime,
												   @FECHAHASTA datetime,
												   @TIPO int,
												   @MOTIVO nvarchar(255)) AS
BEGIN
	INSERT INTO RANDOM.CANCELACION(IdTipoCancelacion, IdTurno, Motivo)
	SELECT @TIPO, T.IdTurno, @MOTIVO
	FROM RANDOM.AGENDA_HORARIO_DISPONIBLE A, RANDOM.TURNO T
	WHERE A.IdProfesional = @PROFESIONAL AND
		  T.IdAgenda = A.IdAgenda AND
		  T.habilitado = 0 AND
		  T.FechaYHoraTurno BETWEEN @FECHADESDE AND @FECHAHASTA
	
	-- UPDATE RANDOM.TURNO SET
		-- habilitado = 1
	-- FROM RANDOM.AGENDA_HORARIO_DISPONIBLE A, RANDOM.TURNO T
	-- WHERE A.IdProfesional = @PROFESIONAL AND
		  -- T.IdAgenda = A.IdAgenda AND
		  -- T.habilitado = 0 AND
		  -- T.FechaYHoraTurno BETWEEN @FECHADESDE AND @FECHAHASTA
END
GO

CREATE TRIGGER RANDOM.AFTER_CANCELACION ON RANDOM.CANCELACION AFTER INSERT AS
BEGIN
	UPDATE RANDOM.TURNO SET
		habilitado = 1
	FROM INSERTED I, RANDOM.TURNO T
	WHERE T.IdTurno = I.IdTurno
END 
GO

--9 compra de bonos
CREATE PROCEDURE RANDOM.COMPRA_DE_BONO(@IdAfiliado int, @Cantidad int, @MontoTotal INT, @Fecha DATETIME) AS
 BEGIN    
 	DECLARE @IdPlan int  
 	DECLARE @Monto int
 	DECLARE @Estado int
 	DECLARE @CONTADOR INT = 0 
 	DECLARE @Raiz INT
 	DECLARE @IdCompra INT
 
 	SET @IdPlan = (SELECT A.IdPlan FROM RANDOM.AFILIADO A WHERE A.NumeroAfiliadoRaiz = @IdAfiliado)
 	SET @Monto = (SELECT B.MontoConsulta FROM RANDOM.PLANES B WHERE B.IdPlan = @IdPlan)
 	SET @Estado = (SELECT C.Estado FROM RANDOM.AFILIADO C WHERE C.NumeroAfiliadoRaiz = @IdAfiliado)
 	SET @Raiz = (SELECT D.NumeroAfiliadoRaiz FROM RANDOM.AFILIADO D WHERE D.NumeroAfiliadoRaiz = @IdAfiliado)
 
 	   INSERT INTO RANDOM.COMPRA_BONO(IdAfiliado, Fecha, MontoTotal, Cantidad)
 	   values(@Raiz, @Fecha, @MontoTotal, @Cantidad)
 	   SET @IdCompra = SCOPE_IDENTITY()
  
 	 WHILE (@CONTADOR < @Cantidad)
 	 BEGIN
 	     INSERT INTO RANDOM.BONO(IdCompra, Usado, Precio, IdPlan, CompraBonoFecha, ConsultaNumero)
 	     values(@IdCompra, 0, @Monto, @IdPlan, @Fecha, NULL) 
 	     SET @CONTADOR = @CONTADOR + 1 
 	 END

 END
 GO

CREATE FUNCTION RANDOM.CALCULO_MONTO(@IdAfiliado int, @Cantidad int)
 RETURNS INT
 AS BEGIN
 
    DECLARE @IdPlan int  
 	DECLARE @Monto int
 	DECLARE @MontoTotal INT
 	DECLARE @Numero INT
 	DECLARE @Resultado INT
 	
       SET @IdPlan = (SELECT A.IdPlan FROM RANDOM.AFILIADO A WHERE A.NumeroAfiliadoRaiz = @IdAfiliado)
 	   SET @Monto = (SELECT P.MontoConsulta FROM RANDOM.PLANES P WHERE P.IdPlan = @IdPlan)
 	   SET @MontoTotal = (@Monto * @Cantidad)
 	   SET @Resultado = @MontoTotal
 
 	RETURN @Resultado
 END
GO

--10 pedido de turno
CREATE PROCEDURE RANDOM.FILTRAR_MEDICO(@Descripcion nvarchar(255), @Apellido nvarchar(255), @DiaNumero INT) AS
BEGIN
IF(@Descripcion = '') 
  BEGIN                           
    SELECT DISTINCT	A.Apellido, A.Nombre, A.IdPersona, E.Descripcion, C.IdEspecialidad, C.HoraDesde, C.HoraHasta
	FROM RANDOM.PERSONA A, RANDOM.PROFESIONAL B, RANDOM.AGENDA_HORARIO_DISPONIBLE C, RANDOM.ESPECIALIDAD_POR_PROFESIONAL D, RANDOM.ESPECIALIDAD E
	WHERE @Apellido = A.Apellido AND A.IdPersona = B.IdProfesional AND C.Dia = @DiaNumero
	AND D.IdProfesional = A.IdPersona AND C.IdEspecialidad = D.IdEspecialidad AND D.IdEspecialidad = E.IdEspecialidad AND C.Activa = 1
   END
IF(@Apellido = '') 
  BEGIN                           
    SELECT DISTINCT	A.Apellido, A.Nombre, A.IdPersona, E.Descripcion, C.IdEspecialidad, C.HoraDesde, C.HoraHasta
	FROM RANDOM.PERSONA A, RANDOM.PROFESIONAL B, RANDOM.AGENDA_HORARIO_DISPONIBLE C, RANDOM.ESPECIALIDAD_POR_PROFESIONAL D, RANDOM.ESPECIALIDAD E
	WHERE @Descripcion = E.Descripcion AND E.IdEspecialidad = D.IdEspecialidad AND D.IdEspecialidad = C.IdEspecialidad AND @DiaNumero = C.Dia
	AND A.IdPersona = B.IdProfesional AND C.IdProfesional = A.IdPersona AND C.Activa = 1
  END
IF(@Descripcion != '' AND @Apellido != '') 
  BEGIN
    SELECT DISTINCT	A.Apellido, A.Nombre, A.IdPersona, E.Descripcion, C.IdEspecialidad, C.HoraDesde, C.HoraHasta
	FROM RANDOM.PERSONA A, RANDOM.PROFESIONAL B, RANDOM.AGENDA_HORARIO_DISPONIBLE C, RANDOM.ESPECIALIDAD_POR_PROFESIONAL D, RANDOM.ESPECIALIDAD E
	WHERE @Descripcion = E.Descripcion AND @Apellido = A.Apellido AND E.IdEspecialidad = D.IdEspecialidad AND D.IdEspecialidad = C.IdEspecialidad
	AND @DiaNumero = C.Dia 	AND A.IdPersona = B.IdProfesional AND C.IdProfesional = A.IdPersona AND C.Activa = 1
  END
END
GO

CREATE PROCEDURE RANDOM.PEDIDO_DE_TURNO_HORARIOS_DISPONIBLES(@Desde DATETIME, @Hasta DATETIME, @IdProfesional INT, @Dia INT, @IdEspecialidad INT) AS
BEGIN
   IF OBJECT_ID('TEMPORALTURNOS') IS NOT NULL
   DROP TABLE TEMPORALTURNOS --sino borrara la tabla cuando invoco, siempre me qeda con datos viejos & si atendia de 10 a 18, aunque el nuevo atienda de 12, sigue contado desde 10

   CREATE TABLE TEMPORALTURNOS(
   Turnos DATETIME,
   DisponibilidadTurno bit) --1 cuando este ocupado, 0 cuando este libre
                     
   DECLARE @X DATETIME = @Desde
   DECLARE @Agenda INT

   SET @Agenda = (SELECT B.IdAgenda FROM RANDOM.AGENDA_HORARIO_DISPONIBLE B WHERE B.IdProfesional = @IdProfesional AND B.Dia = @Dia AND B.IdEspecialidad = @IdEspecialidad AND B.Activa = 1)

	WHILE(datepart(hour,@Hasta) != datepart(hour,@X))
	BEGIN
	IF( @X = any(SELECT C.FechaYHoraTurno fROM RANDOM.TURNO C WHERE C.IdAgenda = @Agenda))
	BEGIN
	INSERT INTO TEMPORALTURNOS(Turnos, DisponibilidadTurno)
	VALUES(@X, 1) --ocupado 1
	SET @X = DATEADD([minute], 30, @X)
	END
	ELSE
	BEGIN
	INSERT INTO TEMPORALTURNOS(Turnos, DisponibilidadTurno)
	VALUES(@X, 0) -- disponible es 0
	SET @X = DATEADD([minute], 30, @X)
	END
	END

	SELECT DISTINCT A.Turnos
	FROM TEMPORALTURNOS A
	WHERE A.DisponibilidadTurno = 0 --EL O ES VACIO

END
GO

CREATE PROCEDURE RANDOM.RESERVO_FECHA_TURNO(@FechaElegida datetime, @Afiliado INT, @Profesional int, @Dia INT, @Especialidad varchar(255)) AS
BEGIN
    
	  DECLARE @IdAgenda INT
	  DECLARE @IdEspecialidad INT
	  DECLARE @IdTurno INT

	  SET @IdEspecialidad = (SELECT B.IdEspecialidad FROM RANDOM.ESPECIALIDAD B WHERE B.Descripcion = @Especialidad)
	  SET @IdAgenda = (SELECT A.IdAgenda FROM RANDOM.AGENDA_HORARIO_DISPONIBLE A WHERE A.IdProfesional = @Profesional AND A.Dia = @Dia AND A.IdEspecialidad = @IdEspecialidad AND A.Activa = 1)
	  SELECT @IdTurno = (SELECT IdTurno FROM RANDOM.TURNO WHERE IdTurno = (SELECT MAX(IdTurno) FROM RANDOM.TURNO))
	  
	  INSERT INTO RANDOM.TURNO(IdTurno, IdAgenda, IdAfiliado, FechaYHoraTurno, Habilitado, IdEspecialidad)
      VALUES (@IdTurno + 1, @IdAgenda, @Afiliado, @FechaElegida, 0, @IdEspecialidad) 

END
GO 

CREATE FUNCTION RANDOM.VALIDAR_AFILIADO(@IdAfiliado int)
 RETURNS INT
 AS BEGIN
    DECLARE @Resultado INT
 	IF (EXISTS (SELECT * FROM RANDOM.AFILIADO WHERE NumeroAfiliadoRaiz = @IdAfiliado) 
	AND (SELECT Estado FROM RANDOM.AFILIADO WHERE NumeroAfiliadoRaiz= @IdAfiliado) = 1)
 	   BEGIN
        SET @Resultado = @IdAfiliado
 	   END
 	ELSE
 	   BEGIN
    SET @Resultado = -1
 	   END
 
 	RETURN @Resultado
 END
GO

--11 registro de llegada para atencion medica
CREATE PROCEDURE RANDOM.GET_ESPECIALIDAD AS
BEGIN
	SELECT * FROM RANDOM.ESPECIALIDAD
	ORDER BY Descripcion ASC
END
GO

CREATE PROCEDURE RANDOM.GET_MEDICOS AS
BEGIN
	SELECT DISTINCT A.Apellido--, A.Apellido + ', ' + A.Nombre AS 'Apellido' 
	FROM RANDOM.PERSONA A, RANDOM.PROFESIONAL B
	WHERE B.IdProfesional = A.IdPersona
	ORDER BY A.Apellido ASC--, A.Nombre ASC
END
GO

CREATE PROCEDURE RANDOM.TRAER_TURNOS_MEDICO(@IdMedico INT, @Anio int, @Mes int, @Dia int ,@IdEspecialidad INT, @DiaSemana INT) AS
BEGIN
    SELECT DISTINCT B.FechaYHoraTurno, B.IdAfiliado
	FROM RANDOM.AGENDA_HORARIO_DISPONIBLE A, RANDOM.TURNO B
	WHERE @IdMedico = A.IdProfesional AND @IdEspecialidad = B.IdEspecialidad AND @DiaSemana = A.Dia
	AND @IdEspecialidad = A.IdEspecialidad AND B.IdAgenda = A.IdAgenda
	AND datepart(YEAR,B.FechaYHoraTurno) = @Anio AND datepart(MONTH,B.FechaYHoraTurno) = @Mes
	AND datepart(DAY,B.FechaYHoraTurno) = @Dia
	AND B.Habilitado = 0 --EN 0 ES SIN CANCELAR O SIN EFECTUAR, ASI QUE MIRO QUE NO ESTE CANCELADO O QUE YA SE ATENDIO(PARA LOS DE LA MAESTRA)
    AND B.RegistrarLlegada = 0 AND A.Activa = 1
	--AND (0 = (SELECT COUNT(*) FROM RANDOM.RESULTADO_TURNO WHERE IdTurno = B.IdTurno))
	ORDER BY B.FechaYHoraTurno ASC
END
GO

CREATE PROCEDURE RANDOM.BONOS_DISPONIBLES(@IdAfiliado INT) AS 
BEGIN

	SELECT DISTINCT B.IdAfiliado, A.IdBono
	FROM RANDOM.BONO A, RANDOM.COMPRA_BONO B, RANDOM.AFILIADO C
	WHERE @IdAfiliado = B.IdAfiliado AND A.IdCompra = B.IdCompra and A.Usado = 0 AND A.Habilitado = 1
	AND A.Usado = 0 AND A.IdPlan = C.IdPlan AND C.Estado = 1
END
GO

CREATE PROCEDURE RANDOM.REGISTRO_LLEGADA(@IdAfiliado int, @IdBono INT, @FechaHoy DATETIME) AS
BEGIN

		DECLARE @X INT

        UPDATE RANDOM.BONO
        SET Usado= 1, ConsultaNumero = (SELECT MAX(ConsultaNumero) FROM RANDOM.BONO) --aclarar en la estrategia esto !
        WHERE IdBono = @IdBono

		SET @X = (SELECT A.IdTurno FROM RANDOM.TURNO A WHERE A.IdAfiliado = @IdAfiliado 
		AND datepart(YEAR,FechaYHoraTurno) = datepart(YEAR,@FechaHoy) AND datepart(MONTH,FechaYHoraTurno) = datepart(MONTH,@FechaHoy)
	    AND datepart(DAY,FechaYHoraTurno) = datepart(DAY,@FechaHoy)
		AND datepart(HOUR,FechaYHoraTurno) = datepart(HOUR,@FechaHoy) AND datepart(MINUTE,FechaYHoraTurno) = datepart(MINUTE,@FechaHoy))

		UPDATE RANDOM.TURNO
		SET RegistrarLlegada=1
		WHERE IdTurno = @X
		
END
GO
-------------------------------TOP 5------------------------------


GO
CREATE PROCEDURE RANDOM.top5EspecialidadesConMasCancelacionesDeTurno (@fechaFrom datetime, @fechaTo datetime)
AS BEGIN
select top 5 E.Descripcion AS 'Especialidad', count(C.IdCancelacion) AS 'Cantidad'
from RANDOM.CANCELACION C
JOIN RANDOM.TURNO T ON C.IdTurno = T.IdTurno
JOIN RANDOM.AGENDA_HORARIO_DISPONIBLE HD ON T.IdAgenda = HD.IdAgenda
JOIN RANDOM.ESPECIALIDAD E ON T.IdEspecialidad = E.IdEspecialidad
WHERE T.FechaYHoraTurno between @fechaFrom and @fechaTo
group by E.Descripcion 
order by 2 desc
END
GO

---------------------

GO
CREATE PROCEDURE RANDOM.top5ProfesionalesMasConsultadosPorPlan(@fechaFrom datetime, @fechaTo datetime, @numeroPlan int)
AS BEGIN
select top 5 P.IdProfesional AS 'Matrícula Profesional', PE.Nombre, PE.Apellido, count(RT.IdResultadoTurno) AS 'Cantidad'
from RANDOM.RESULTADO_TURNO RT 
JOIN RANDOM.TURNO T ON RT.IdTurno = T.IdTurno
JOIN RANDOM.AGENDA_HORARIO_DISPONIBLE HD ON T.IdAgenda = HD.IdAgenda
JOIN RANDOM.PROFESIONAL P ON HD.IdProfesional = P.IdProfesional
JOIN RANDOM.PERSONA PE ON PE.IdPersona = P.IdProfesional
JOIN RANDOM.AFILIADO A ON T.IdAfiliado = a.IdPersona
JOIN RANDOM.PLANES PL ON PL.IdPlan = A.IdPlan 
WHERE T.FechaYHoraTurno between @fechaFrom and @fechaTo
AND PL.Abono = @numeroPlan     
group by P.IdProfesional, PE.Nombre, PE.Apellido
order by 4 desc
END
GO

---------------------
GO
CREATE PROCEDURE RANDOM.top5ProfesionalesMenosHorasTrabajadas(@fechaFrom datetime, @fechaTo datetime, @numeroPlan varchar(50), @nombreEspecialidad varchar(50))
AS BEGIN
select top 5 P.IdProfesional AS 'Matrícula Profesinal',PE.Nombre, PE.Apellido, (count(RT.IdResultadoTurno)) * 0.5 AS 'Cantidad DE HORAS'
from RANDOM.RESULTADO_TURNO RT
JOIN RANDOM.TURNO T ON RT.IdTurno = T.IdTurno
JOIN RANDOM.AGENDA_HORARIO_DISPONIBLE HD ON T.IdAgenda = HD.IdAgenda
JOIN RANDOM.PROFESIONAL P ON HD.IdProfesional = P.IdProfesional
JOIN RANDOM.PERSONA PE ON PE.IdPersona = P.IdProfesional
JOIN RANDOM.AFILIADO A ON T.IdAfiliado = a.IdPersona
JOIN RANDOM.PLANES PL ON PL.IdPlan = A.IdPlan     
JOIN RANDOM.ESPECIALIDAD E ON E.IdEspecialidad = T.IdEspecialidad
WHERE T.FechaYHoraTurno between @fechaFrom and @fechaTo
AND E.Descripcion = @nombreEspecialidad
AND PL.Abono = @numeroPlan    
group by P.IdProfesional, PE.Nombre, PE.Apellido
order by 2 asc
END
GO

-------------------------------------------

IF OBJECT_ID('TEMPORAL') IS NOT NULL
DROP TABLE TEMPORAL

create table TEMPORAL(
IdPersona int,
Cantidad int
)
--Primero aca busco el id de la persona, y en el procedure que le sigue busco el numero raiz y extension, para mostrar eso
GO
CREATE PROCEDURE RANDOM.antesDelTop(@fechaFrom datetime, @fechaTo datetime)
as
begin
INSERT TEMPORAL(IdPersona,Cantidad)
select P.IdPersona AS 'Persona', sum(CB.Cantidad) AS 'Cantidad'
from RANDOM.COMPRA_BONO CB
JOIN RANDOM.AFILIADO A ON A.IdPersona = CB.IdAfiliado
JOIN RANDOM.PERSONA P ON P.IdPersona = A.IdPersona
WHERE CB.Fecha between @fechaFrom and @fechaTo
group by P.IdPersona 
order by 2 desc
end
GO

GO
CREATE PROCEDURE RANDOM.top5AfiliadosConMayorCantBonosComprados(@fechaFrom datetime, @fechaTo datetime)
AS BEGIN
EXEC RANDOM.antesDelTop @fechaFrom , @fechaTo
SELECT distinct top 5  CAST (A.NumeroAfiliadoRaiz AS VARCHAR) + CAST (a.NumeroAfiliadoExt AS VARCHAR) AS 'Afiliado', T.Cantidad, 
				CASE WHEN a.NumeroAfiliadoExt != '00' THEN 'Si'
                   WHEN a.CantidadACargo > 0 THEN 'Si'
                   ELSE 'No'
				END AS "Pertenece a grupo familiar"
FROM TEMPORAL T
JOIN RANDOM.AFILIADO A ON A.IdPersona = T.IdPersona
order by 2 desc
END
GO


/*para probar
select * from temporal
EXEC RANDOM.antesDelTop '2014/12/28 18:00:00' , '2015/12/30 18:00:00'

select P.IdPersona AS 'Persona', sum(CB.Cantidad) AS 'Cantidad'
from RANDOM.COMPRA_BONO CB
JOIN RANDOM.AFILIADO A ON A.IdPersona = CB.IdAfiliado
JOIN RANDOM.PERSONA P ON P.IdPersona = A.IdPersona
WHERE CB.Fecha between '20141228 18:00:00' and '20151230 18:00:00'
group by P.IdPersona 
order by 2 desc
*/

--------------------------------------------------------

GO
CREATE PROCEDURE RANDOM.top5EspecialidadesConMasConsultasUtilizadas(@fechaFrom datetime, @fechaTo datetime)
AS BEGIN
select top 5 E.Descripcion AS 'Especialidad', count(RT.IdResultadoTurno) AS 'Cantidad'
from RANDOM.RESULTADO_TURNO RT 
JOIN RANDOM.TURNO T ON RT.IdTurno = T.IdTurno
JOIN RANDOM.AGENDA_HORARIO_DISPONIBLE HD ON T.IdAgenda = HD.IdAgenda
JOIN RANDOM.ESPECIALIDAD E ON T.IdEspecialidad = E.IdEspecialidad
WHERE T.FechaYHoraTurno between  @fechaFrom and @fechaTo
group by E.Descripcion 
order by 2 desc
END
GO


-----AGENDA------

GO
CREATE FUNCTION RANDOM.VERIFICACION_DIA(@IdProfesional int, @Dia int)
RETURNS nvarchar(255)
AS BEGIN
	
	DECLARE @DiaCargado int
	SELECT @DiaCargado = Dia FROM RANDOM.AGENDA_HORARIO_DISPONIBLE WHERE IdProfesional = @IdProfesional AND Activa = 1
	DECLARE @Resultado int
	
	IF (@Dia = @DiaCargado)
		BEGIN
		SELECT @Resultado = 1
		END
	ELSE 
		BEGIN
		SELECT @Resultado = 0
		END

RETURN @Resultado

END
GO



GO
CREATE PROCEDURE RANDOM.CARGA_AGENDA(@IdProfesional int, @IdEspecialidad int, @HoraDesde nvarchar(255), @HoraHasta nvarchar(255), @Dia int) AS
BEGIN

DECLARE @HorasACargar nvarchar(255)
SELECT @HorasACargar = ((CAST(@HoraHasta AS INT)) -(CAST(@HoraDesde AS INT))) 
DECLARE @HorasCargadas int
SELECT @HorasCargadas = HorasAcumuladas FROM RANDOM.PROFESIONAL WHERE IdProfesional = @IdProfesional
IF ( (@HorasCargadas + @HorasACargar) < 48)
	BEGIN
		INSERT INTO RANDOM.AGENDA_HORARIO_DISPONIBLE
		VALUES(@IdProfesional, @IdEspecialidad, @HoraDesde, @HoraHasta, @Dia, 1)

		UPDATE RANDOM.PROFESIONAL SET
		HorasAcumuladas = (HorasAcumuladas + @HorasACargar)
		WHERE IdProfesional = @IdProfesional

	END

ELSE 
RAISERROR ('Horas a cargar en la semana mayor a 48hs', 16, 217) WITH SETERROR
	
END
GO

CREATE PROCEDURE RANDOM.TRAER_PROFESIONAL_CON_DNI(@DNI INT) AS
BEGIN
	SELECT A.Apellido, A.Nombre, A.IdPersona, B.Descripcion, B.IdEspecialidad
	FROM RANDOM.PERSONA A, RANDOM.ESPECIALIDAD B, RANDOM.ESPECIALIDAD_POR_PROFESIONAL C
	WHERE A.Documento = @DNI AND A.IdPersona = C.IdProfesional AND C.IdEspecialidad = B.IdEspecialidad
	ORDER BY B.Descripcion
END


GO 
CREATE PROCEDURE RANDOM.GET_AGENDA(@IdProfesional int)  AS
BEGIN
	
	--DECLARE @DIA int
	--SELECT @DIA =Dia FROM RANDOM.AGENDA_HORARIO_DISPONIBLE WHERE IdProfesional = @IdProfesional AND Activa = 1
	
	SELECT B.DiaLetra, A.HoraDesde, A.HoraHasta 
	FROM RANDOM.AGENDA_HORARIO_DISPONIBLE A, TABLA_DE_DIAS_NUMERO B
	WHERE A.IdProfesional = @IdProfesional AND A.Activa = 1
	AND A.Dia = B.DiaNumero
END 
GO

CREATE PROCEDURE RANDOM.CANCELACION_TURNO_AFILIADO(@Afiliado INT, @Fecha DATETIME) AS
BEGIN
	SELECT A.IdTurno, A.FechaYHoraTurno
	FROM RANDOM.TURNO A
	WHERE @Afiliado = A.IdAfiliado 
	AND datepart(YEAR,@Fecha) = datepart(YEAR,A.FechaYHoraTurno) AND datepart(MONTH,@Fecha) = datepart(MONTH,A.FechaYHoraTurno)
	AND datepart(DAY,@Fecha) < datepart(DAY,A.FechaYHoraTurno)
END
         

--GO
--CREATE PROCEDURE RANDOM.GET_AGENDA(@IdProfesional int)  AS
--BEGIN
	
--	DECLARE @DIA int
--	SELECT @Dia FROM RANDOM.AGENDA_HORARIO_DISPONIBLE WHERE IdProfesional = @IdProfesional AND Activa = 1
--	DECLARE @DiaNombre nvarchar(255)

	
--	IF (@Dia = 1)
--		BEGIN
--			SELECT @DiaNombre = 'Domingo'
--			SELECT @DiaNombre AS Dia, HoraDesde, HoraHasta FROM RANDOM.AGENDA_HORARIO_DISPONIBLE WHERE IdProfesional = @IdProfesional AND Activa = 1
--		END
--	ELSE
--		BEGIN
--			IF (@DIA = 2)
--				BEGIN
--				SELECT @DiaNombre = 'Lunes'
--				SELECT @DiaNombre AS Dia, HoraDesde, HoraHasta FROM RANDOM.AGENDA_HORARIO_DISPONIBLE WHERE IdProfesional = @IdProfesional AND Activa = 1
--				END

--			ELSE 
--				BEGIN
--					IF (@DIA = 3)
--						BEGIN
--						SELECT @DiaNombre = 'Martes'
--						SELECT @DiaNombre AS Dia, HoraDesde, HoraHasta FROM RANDOM.AGENDA_HORARIO_DISPONIBLE WHERE IdProfesional = @IdProfesional AND Activa = 1
--						END
--					ELSE
--						BEGIN
--							IF (@DIA = 4)
--								BEGIN
--								SELECT @DiaNombre = 'Miércoles'
--								SELECT @DiaNombre AS Dia, HoraDesde, HoraHasta FROM RANDOM.AGENDA_HORARIO_DISPONIBLE WHERE IdProfesional = @IdProfesional AND Activa = 1
--								END
--							ELSE
--								BEGIN
--									IF (@DIA = 5)
--										BEGIN
--										SELECT @DiaNombre = 'Jueves'
--										SELECT @DiaNombre AS Dia, HoraDesde, HoraHasta FROM RANDOM.AGENDA_HORARIO_DISPONIBLE WHERE IdProfesional = @IdProfesional AND Activa = 1
--										END
--									ELSE
--										BEGIN
--											IF (@DIA = 6)
--												BEGIN
--												SELECT @DiaNombre = 'Viernes'
--												SELECT @DiaNombre AS Dia, HoraDesde, HoraHasta FROM RANDOM.AGENDA_HORARIO_DISPONIBLE WHERE IdProfesional = @IdProfesional AND Activa = 1
--												END
--											ELSE
--												BEGIN
--												SELECT @DiaNombre = 'Sábado'
--												SELECT @DiaNombre AS Dia, HoraDesde, HoraHasta FROM RANDOM.AGENDA_HORARIO_DISPONIBLE WHERE IdProfesional = @IdProfesional AND Activa = 1
--												END
--										END
--									END
--							END
--					END
--			END


--END
--GO





---------------DATOS PARA ESTRATEGIA-----------------

/*
en la cancelacion, es un dia solo, o un rango de dias, no se ven fechas cuando el medico cancela  M.Turno_Fecha ES A FECHA QUE SE HACE EL TURNO Y BONO COSULTA FECHA IMPRESION ES LA FECHA EN LA QUE SE CONSUME EL BONO
1) TEMA TIPO DNI (OK):
	es necesario utilizar tipo y numero de documento? O se puede usar solo DNI ya que de los medicos y personas cargados solo tenemos dni?
	En el enunciado se pide Tipo y número de documento
HABRIA QUE CREAR LA TABLA Y PONER LOS TIPOS DE DOCUMENTOS
--> creada
2) TEMA USUARIO (OK):
	 Es obligatorio que todas las personas tengan un usuario? Y que un usuario tenga una persona asociada?
	 Todos los afiliados y profesionales tienen que tener un username y password, queda a criterio de ustedes como se hace la asignación. Los mismos son necesarios para poder acceder al sistema y realizar las acciones correspondientes a su rol como la compra de bonos o pedido de turno  en la caso del afiliado o registrar el resultado de una consulta en el caso del profesional.
--> CREAMOS SOLO USUARIO DE PRUEBAS - ADMIN Y LOS OTROS SE MIGRAN
3) AGENDA PROFESIONAL (OK):
	quien manejaria la agenda profesional? podria ser el administrador?
	si podrian considerarlo de ese modo.
--> creo que seria la mejor forma
-> LA MANEJA EL ADMIN
4) No hay bonos de farmacia ni compra de medicamentos. 
-->ok
5) TABLA MAESTRA (OK):
	donde ponemos TURNO NUMERO, TURNO FECHA en la AGENDA O TURNO?
	--> ESTO VA EN TURNO, EL NUMERO DE TURNO ES UNICO POR LO TANTO VA A SER LE ID DE LA TABLA 
6) AFILIADO (OK):
	 Estado ??
	faltan setear cosas
	--> ESTADO ES BAJA O ACTIVO
7)TANTOS INDICES HACEN FALTA? (HAY QE BORRAR O COMENTAR)
--> Emm no se, lo habiamos echo asi el año pasado, pero si se pueden sacar alguno mejor!
-> yo el año pasado hice 2 indices cuando los necesite. para mi son muchos al pedo, talvez en tablas qe ni hace falta, hace corra mas lento el script. Paz
8)CONSULTA SINTOMAS Y ENFERMEDAD SOLO DAN SINTOMA/ENFERMEDAD 1 Y DESPUES NULL (OK)
--> eso se tendra que ir completando a medida de que el paciente va poniendo el sintoma y enfermedad creeria.
9) ESPECIALIDAD POR PROFESIONAL
	el profesional no deberia tener el id de especialidad? no hay forma de joinear?
--> como puede tener muchas especialidades, va a estar en la tabla especialidad por profesional aclarada que especialidad tienen cada profesional.
-> Pero como joinea? porque pedis la especialidad y el profesional, como sabes que es de ese profesional? Paz
10) IDEA NRO AFILIADO (OK):
Para crear el numero de afiliado se me ocurrio crear 2 campos uno que sea el numero de afiliado gral y otro qe sea por familiar, es decir 00, 01 etc. 
Las fechas en cuestion las tomasmos como pensabamos. tomamos que los campos bono_consulta_fecha_impresión  y compra_bono_fecha son independientes
las horas trabajadas son las horas que estuvo atendiendo gente
TURNO FECHA ES LA FECHA EN LA QUE SE EJECUTA EL TURNO.
la matricula del profesional va a ser el id profesional
El peridodo de cancelacion de un profesional se tiene que contar en dias, y no en horas de un solo dia.
Cuando un turno es dado de baja se va a generar otro turno para suplnatar al que se dio de baja en caso de que sea necesario
Usamos una grilla para los horarios disponibles y el date box todos los días de lunes a sábados 
Los síntomas nuevos si bien se cargan una vez, va a ser un gran steing que especifique todos los síntomas que tiene la persona.
Y el síntoma u enfermedad se carga después de que se vio el médico.
No hay números de turno repetidos
Que los nombres de usuarios sean números, 8 numeros. No tienen por qué ser el número de documento de la persona nueva 
1.Que Compra_Bono_Fecha y Bono_Consulta_Fecha_Impresion tengan la misma fecha y todos los demás campos en nulos (exceptuando los datos del usuario y planes médicos)
2.Que Compra_Bono_Fecha, Bono_Consulta_Fecha_Impresion, Consulta_Sintoma y Consulta_Enfermedades sean nulos, y todo lo demás contenga datos. 
3.Que Compra_Bono_Fecha sea nulo y todos los demás campos tengan datos.
1.Se efectúa la compra del bono.
2 corresponde a la solicitud del turno.
3.se refiere a que se efectivizó la consulta, registrando la utilización del bono y el diagnóstico del médico.
Compra_Bono_Fecha es a fecha en la que se compra el bono, y Bono_Consulta_Fecha_Impresion es la fecha en la que se usa el bono.
Hay dos registros de cada persona que tienen numero de turno porque uno es cuando saco el turno, y el otro cuando se concreto el turno, por eso tiene sintomas y enfermedad
No hya numeros de bonos de consultas en mas de un usuario
Poner tipo de documento porque lo dice el enunciado, aunque sean todos dni
+++ En la maestra no hay medicos que sean usuarios -  DONDE DICE? YO CREO QE SI Y YA MIGRE ALGUNOS
Los bonos de farmacia no se compran
No hay que crear en ningun momentos funcionalidades
Si el paciente tiene el turno no nulo, pero a la vez los campos Consulta_Sintomas y Consulta_Enfermedades estan en nulo. ¿Significa que la persona cancelo el turno?
No, ese caso representa la solicitud del turno. Podrian considerar que hubo  una cancelación cuando no hay referencia de Consulta_Sintomas y Consulta_Enfermedades para un cierto número de turno.
Bono_Consulta_Fecha_Impresión se refiere a la fecha en que se compró el bono utilizado.
cuando hay un número de bono repetido en la maestra, se describen dos situaciones. Una  cuando se realiza la compra del bono y la otra cuando el paciente fue atendido utilizando el mismo. 
Hay que definir como hacemos el parentezco entre los familiares en la maestra porque no hay algun campo que nos diga que son familiares
Las 24 hs de cancelacion la podemos tomar como si fuese el dia anterior, no literal 24 hs
En agenda_horario_disponible ponemos todos los horarios que tengan los doctores (los que carguemos nosotros si es que no estan en la maestra) y si  esta disponible o no.
Todos los ID manejemoslo en INT, y los string NVARCHAR porque acepta unicode
Hacer todas las validaciones en c#
BAJA AFILIADO: se decidio dar de baja los afiliados de a uno. Es decir qe aunqe el afiliado principal se da de baja, los demas afiliados siguen activos. BAJA INDIVIDUAL
en la estrategia aclarar los comentarios que psue en la creacion de la tablas

hay que crear en la tabla personas los usuarios qde prueba que se creen de ahora en mas, los 4 del inicio ya estan
*/
